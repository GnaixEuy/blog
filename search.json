[{"title":"Java Stream流操作，让代码更加的优雅","url":"/2024/04/19/Stream流操作，让代码更加的优雅/","content":"\n在JAVA中，涉及到对`数组`、`Collection`等集合类中的元素进行操作的时候，通常会通过**循环的方式**进行逐个处理，或者**使用Stream**的方式进行处理。\n\n例如，现在有这么一个需求：\n\n> 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n\n在**JAVA7及之前**的代码中，我们会可以照如下的方式进行实现：\n\n```java\n/**\n * 【常规方式】\n * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n *\n * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔\n * @return 倒序输出符合条件的单词列表\n */\npublic List<String> sortGetTop3LongWords(@NotNull String sentence) {\n    // 先切割句子，获取具体的单词信息\n    String[] words = sentence.split(\" \");\n    List<String> wordList = new ArrayList<>();\n    // 循环判断单词的长度，先过滤出符合长度要求的单词\n    for (String word : words) {\n        if (word.length() > 5) {\n            wordList.add(word);\n        }\n    }\n    // 对符合条件的列表按照长度进行排序\n    wordList.sort((o1, o2) -> o2.length() - o1.length());\n    // 判断list结果长度，如果大于3则截取前三个数据的子list返回\n    if (wordList.size() > 3) {\n        wordList = wordList.subList(0, 3);\n    }\n    return wordList;\n}\n```\n\n在**JAVA8及之后**的版本中，借助Stream流，我们可以更加优雅的写出如下代码：\n\n```java\n/**\n * 【Stream方式】\n * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n *\n * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔\n * @return 倒序输出符合条件的单词列表\n */\npublic List<String> sortGetTop3LongWordsByStream(@NotNull String sentence) {\n    return Arrays.stream(sentence.split(\" \"))\n            .filter(word -> word.length() > 5)\n            .sorted((o1, o2) -> o2.length() - o1.length())\n            .limit(3)\n            .collect(Collectors.toList());\n}\n```\n\n直观感受上，`Stream`的实现方式代码更加简洁、一气呵成。很多的同学在代码中也经常使用Stream流，但是对Stream流的认知往往也是仅限于会一些简单的`filter`、`map`、`collect`等操作，但JAVA的Stream可以适用的场景与能力远不止这些。\n\n---\n\n那么问题来了：**Stream相较于传统的foreach的方式处理stream，到底有啥优势**？\n\n这里我们可以先搁置这个问题，先整体全面的了解下Stream，然后再来讨论下这个问题。\n\n笔者结合在团队中多年的代码检视遇到的情况，结合平时项目编码实践经验，对**Stream的核心要点与易混淆用法**、**典型使用场景**等进行了详细的梳理总结，希望可以帮助大家对Stream有个更全面的认知，也可以更加高效的应用到项目开发中去。\n\n## Stream初相识\n\n概括讲，可以将Stream流操作分为**3种类型**：\n\n- 创建Stream\n- Stream中间处理\n- 终止Steam\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011703.png)\n\n每个Stream管道操作类型都包含若干API方法，先列举下各个API方法的功能介绍。\n\n- **开始管道**\n\n主要负责新建一个Stream流，或者基于现有的数组、List、Set、Map等集合类型对象创建出新的Stream流。\n\n| API              | 功能说明                                         |\n| ---------------- | ------------------------------------------------ |\n| stream()         | 创建出一个新的stream串行流对象                   |\n| parallelStream() | 创建出一个可并行执行的stream流对象               |\n| Stream.of()      | 通过给定的一系列元素创建一个新的Stream串行流对象 |\n\n---\n\n- **中间管道**\n\n负责对Stream进行处理操作，并返回一个新的Stream对象，中间管道操作可以进行**叠加**。\n\n| API        | 功能说明                                                     |\n| ---------- | ------------------------------------------------------------ |\n| filter()   | 按照条件过滤符合要求的元素， 返回新的stream流                |\n| map()      | 将已有元素转换为另一个对象类型，一对一逻辑，返回新的stream流 |\n| flatMap()  | 将已有元素转换为另一个对象类型，一对多逻辑，即原来一个元素对象可能会转换为1个或者多个新类型的元素，返回新的stream流 |\n| limit()    | 仅保留集合前面指定个数的元素，返回新的stream流               |\n| skip()     | 跳过集合前面指定个数的元素，返回新的stream流                 |\n| concat()   | 将两个流的数据合并起来为1个新的流，返回新的stream流          |\n| distinct() | 对Stream中所有元素进行去重，返回新的stream流                 |\n| sorted()   | 对stream中所有的元素按照指定规则进行排序，返回新的stream流   |\n| peek()     | 对stream流中的每个元素进行逐个遍历处理，返回处理后的stream流 |\n\n---\n\n- **终止管道**\n\n顾名思义，通过终止管道操作之后，Stream流将**会结束**，最后可能会执行某些逻辑处理，或者是按照要求返回某些执行后的结果数据。\n\n| API         | 功能说明                                                     |\n| ----------- | ------------------------------------------------------------ |\n| count()     | 返回stream处理后最终的元素个数                               |\n| max()       | 返回stream处理后的元素最大值                                 |\n| min()       | 返回stream处理后的元素最小值                                 |\n| findFirst() | 找到第一个符合条件的元素时则终止流处理                       |\n| findAny()   | 找到任何一个符合条件的元素时则退出流处理，这个**对于串行流时与findFirst相同，对于并行流时比较高效**，任何分片中找到都会终止后续计算逻辑 |\n| anyMatch()  | 返回一个boolean值，类似于isContains(),用于判断是否有符合条件的元素 |\n| allMatch()  | 返回一个boolean值，用于判断是否所有元素都符合条件            |\n| noneMatch() | 返回一个boolean值， 用于判断是否所有元素都不符合条件         |\n| collect()   | 将流转换为指定的类型，通过Collectors进行指定                 |\n| toArray()   | 将流转换为数组                                               |\n| iterator()  | 将流转换为Iterator对象                                       |\n| foreach()   | 无返回值，对元素进行逐个遍历，然后执行给定的处理逻辑         |\n\n## Stream方法使用\n\n### map与flatMap\n\n`map`与`flatMap`都是用于转换已有的元素为其它元素，区别点在于：\n\n- map **必须是一对一的**，即每个元素都只能转换为1个新的元素\n- flatMap **可以是一对多的**，即每个元素都可以转换为1个或者多个新的元素\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011747.png)\n\n比如：**有一个字符串ID列表，现在需要将其转为User对象列表**。可以使用map来实现：\n\n```java\n/**\n * 演示map的用途：一对一转换\n */\npublic void stringToIntMap() {\n    List<String> ids = Arrays.asList(\"205\", \"105\", \"308\", \"469\", \"627\", \"193\", \"111\");\n    // 使用流操作\n    List<User> results = ids.stream()\n            .map(id -> {\n                User user = new User();\n                user.setId(id);\n                return user;\n            })\n            .collect(Collectors.toList());\n    System.out.println(results);\n}\n```\n\n执行之后，会发现每一个元素都被转换为对应新的元素，但是前后总元素个数是一致的：\n\n```bash\n[User{id='205'}, \n User{id='105'},\n User{id='308'}, \n User{id='469'}, \n User{id='627'}, \n User{id='193'}, \n User{id='111'}]\n```\n\n---\n\n再比如：**现有一个句子列表，需要将句子中每个单词都提取出来得到一个所有单词列表**。这种情况用map就搞不定了，需要`flatMap`上场了：\n\n```java\npublic void stringToIntFlatmap() {\n    List<String> sentences = Arrays.asList(\"hello world\",\"Jia Gou Wu Dao\");\n    // 使用流操作\n    List<String> results = sentences.stream()\n            .flatMap(sentence -> Arrays.stream(sentence.split(\" \")))\n            .collect(Collectors.toList());\n    System.out.println(results);\n}\n```\n\n执行结果如下，可以看到结果列表中元素个数是比原始列表元素个数要多的：\n\n```csharp\n[hello, world, Jia, Gou, Wu, Dao]\n```\n\n这里需要补充一句，`flatMap`操作的时候其实是先每个元素处理并返回一个新的Stream，然后将多个Stream展开合并为了一个完整的新的Stream，如下：\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011838.png)\n\n### peek和foreach方法\n\n`peek`和`foreach`，都可以用于对元素进行遍历然后逐个的进行处理。\n\n但根据前面的介绍，**peek属于中间方法**，而**foreach属于终止方法**。这也就意味着peek只能作为管道中途的一个处理步骤，而没法直接执行得到结果，其后面必须还要有其它终止操作的时候才会被执行；而foreach作为无返回值的终止方法，则可以直接执行相关操作。\n\n```java\npublic void testPeekAndforeach() {\n    List<String> sentences = Arrays.asList(\"hello world\",\"Jia Gou Wu Dao\");\n    // 演示点1： 仅peek操作，最终不会执行\n    System.out.println(\"----before peek----\");\n    sentences.stream().peek(sentence -> System.out.println(sentence));\n    System.out.println(\"----after peek----\");\n    // 演示点2： 仅foreach操作，最终会执行\n    System.out.println(\"----before foreach----\");\n    sentences.stream().forEach(sentence -> System.out.println(sentence));\n    System.out.println(\"----after foreach----\");\n    // 演示点3： peek操作后面增加终止操作，peek会执行\n    System.out.println(\"----before peek and count----\");\n    sentences.stream().peek(sentence -> System.out.println(sentence)).count();\n    System.out.println(\"----after peek and count----\");\n}\n```\n\n输出结果可以看出，peek独自调用时并没有被执行、但peek后面加上终止操作之后便可以被执行，而foreach可以直接被执行：\n\n```mipsasm\n----before peek----\n----after peek----\n----before foreach----\nhello world\nJia Gou Wu Dao\n----after foreach----\n----before peek and count----\nhello world\nJia Gou Wu Dao\n----after peek and count----\n```\n\n---\n\n### filter、sorted、distinct、limit\n\n这几个都是常用的Stream的中间操作方法，具体的方法的含义在上面的表格里面有说明。具体使用的时候，**可以根据需要选择一个或者多个进行组合使用，或者同时使用多个相同方法的组合**：\n\n```java\npublic void testGetTargetUsers() {\n    List<String> ids = Arrays.asList(\"205\",\"10\",\"308\",\"49\",\"627\",\"193\",\"111\", \"193\");\n    // 使用流操作\n    List<Dept> results = ids.stream()\n            .filter(s -> s.length() > 2)\n            .distinct()\n            .map(Integer::valueOf)\n            .sorted(Comparator.comparingInt(o -> o))\n            .limit(3)\n            .map(id -> new Dept(id))\n            .collect(Collectors.toList());\n    System.out.println(results);\n}\n```\n\n上面的代码片段的处理逻辑很清晰：\n\n1. 使用filter过滤掉不符合条件的数据\n2. 通过distinct对存量元素进行去重操作\n3. 通过map操作将字符串转成整数类型\n4. 借助sorted指定按照数字大小正序排列\n5. 使用limit截取排在前3位的元素\n6. 又一次使用map将id转为Dept对象类型\n7. 使用collect终止操作将最终处理后的数据收集到list中\n\n输出结果：\n\n```bash\n[Dept{id=111},  Dept{id=193},  Dept{id=205}]\n```\n\n---\n\n### 简单结果终止方法\n\n按照前面介绍的，终止方法里面像`count`、`max`、`min`、`findAny`、`findFirst`、`anyMatch`、`allMatch`、`nonneMatch`等方法，均属于这里说的简单结果终止方法。所谓简单，指的是其结果形式是数字、布尔值或者Optional对象值等。\n\n```java\npublic void testSimpleStopOptions() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    // 统计stream操作后剩余的元素个数\n    System.out.println(ids.stream().filter(s -> s.length() > 2).count());\n    // 判断是否有元素值等于205\n    System.out.println(ids.stream().filter(s -> s.length() > 2).anyMatch(\"205\"::equals));\n    // findFirst操作\n    ids.stream().filter(s -> s.length() > 2)\n            .findFirst()\n            .ifPresent(s -> System.out.println(\"findFirst:\" + s));\n}\n```\n\n执行后结果为：\n\n```vbnet\n6\ntrue\nfindFirst:205\n```\n\n---\n\n**避坑提醒**\n\n这里需要补充提醒下，**一旦一个Stream被执行了终止操作之后，后续便不可以再读这个流执行其他的操作**了，否则会报错，看下面示例：\n\n```java\npublic void testHandleStreamAfterClosed() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    Stream<String> stream = ids.stream().filter(s -> s.length() > 2);\n    // 统计stream操作后剩余的元素个数\n    System.out.println(stream.count());\n    System.out.println(\"-----下面会报错-----\");\n    // 判断是否有元素值等于205\n    try {\n        System.out.println(stream.anyMatch(\"205\"::equals));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"-----上面会报错-----\");\n}\n```\n\n执行的时候，结果如下：\n\n```mipsasm\n6\n-----下面会报错-----\njava.lang.IllegalStateException: stream has already been operated upon or closed\n at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:229)\n at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449)\n at com.veezean.skills.stream.StreamService.testHandleStreamAfterClosed(StreamService.java:153)\n at com.veezean.skills.stream.StreamService.main(StreamService.java:176)\n-----上面会报错-----\n```\n\n因为stream已经被执行`count()`终止方法了，所以对stream再执行`anyMatch`方法的时候，就会报错`stream has already been operated upon or closed`，这一点在使用的时候需要特别注意。\n\n---\n\n### 结果收集终止方法\n\n因为Stream主要用于对集合数据的处理场景，所以除了上面几种获取简单结果的终止方法之外，更多的场景是获取一个集合类的结果对象，比如List、Set或者HashMap等。\n\n这里就需要`collect`方法出场了，它可以支持生成如下类型的结果数据：\n\n- 一个`集合类`，比如List、Set或者HashMap等\n- StringBuilder对象，支持将多个`字符串进行拼接`处理并输出拼接后结果\n- 一个可以记录个数或者计算总和的对象（`数据批量运算统计`）\n\n---\n\n#### 生成集合\n\n应该算是collect最常被使用到的一个场景了：\n\n```java\npublic void testCollectStopOptions() {\n    List<Dept> ids = Arrays.asList(new Dept(17), new Dept(22), new Dept(23));\n    // collect成list\n    List<Dept> collectList = ids.stream().filter(dept -> dept.getId() > 20)\n            .collect(Collectors.toList());\n    System.out.println(\"collectList:\" + collectList);\n    // collect成Set\n    Set<Dept> collectSet = ids.stream().filter(dept -> dept.getId() > 20)\n            .collect(Collectors.toSet());\n    System.out.println(\"collectSet:\" + collectSet);\n    // collect成HashMap，key为id，value为Dept对象\n    Map<Integer, Dept> collectMap = ids.stream().filter(dept -> dept.getId() > 20)\n            .collect(Collectors.toMap(Dept::getId, dept -> dept));\n    System.out.println(\"collectMap:\" + collectMap);\n}\n```\n\n结果如下：\n\n```bash\ncollectList:[Dept{id=22}, Dept{id=23}]\ncollectSet:[Dept{id=23}, Dept{id=22}]\ncollectMap:{22=Dept{id=22}, 23=Dept{id=23}}\n```\n\n---\n\n#### 生成拼接字符串\n\n**将一个List或者数组中的值拼接到一个字符串里并以逗号分隔开**，这个场景相信大家都不陌生吧？\n\n如果通过`for`循环和`StringBuilder`去循环拼接，还得考虑下最后一个逗号如何处理的问题，很繁琐:\n\n```java\npublic void testForJoinStrings() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    StringBuilder builder = new StringBuilder();\n    for (String id : ids) {\n        builder.append(id).append(',');\n    }\n    // 去掉末尾多拼接的逗号\n    builder.deleteCharAt(builder.length() - 1);\n    System.out.println(\"拼接后：\" + builder.toString());\n}\n```\n\n但是现在有了Stream，使用`collect`可以轻而易举的实现：\n\n```java\npublic void testCollectJoinStrings() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    String joinResult = ids.stream().collect(Collectors.joining(\",\"));\n    System.out.println(\"拼接后：\" + joinResult);\n}\n```\n\n两种方式都可以得到完全相同的结果，但Stream的方式更优雅：\n\n```undefined\n拼接后：205,10,308,49,627,193,111,193\n```\n\n---\n\n#### 数据批量数学运算\n\n还有一种场景，实际使用的时候可能会比较少，就是使用collect生成数字数据的总和信息，也可以了解下实现方式：\n\n```java\npublic void testNumberCalculate() {\n    List<Integer> ids = Arrays.asList(10, 20, 30, 40, 50);\n    // 计算平均值\n    Double average = ids.stream().collect(Collectors.averagingInt(value -> value));\n    System.out.println(\"平均值：\" + average);\n    // 数据统计信息\n    IntSummaryStatistics summary = ids.stream().collect(Collectors.summarizingInt(value -> value));\n    System.out.println(\"数据统计信息： \" + summary);\n}\n```\n\n上面的例子中，使用collect方法来对list中元素值进行数学运算，结果如下：\n\n```python\n平均值：30.0\n总和： IntSummaryStatistics{count=5, sum=150, min=10, average=30.000000, max=50}\n```\n\n---\n\n## 并行Stream\n\n### 机制说明\n\n使用并行流，可以有效利用计算机的多CPU硬件，提升逻辑的执行速度。并行流通过将一整个stream划分为`多个片段`，然后对各个分片流并行执行处理逻辑，最后将各个分片流的执行结果汇总为一个整体流。\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011902.png)\n\n### 约束与限制\n\n并行流类似于多线程在并行处理，所以与多线程场景相关的一些问题同样会存在，比如死锁等问题，所以在并行流终止执行的函数逻辑，必须要保证**线程安全**。\n\n---\n\n## 回答最初的问题\n\n到这里，关于JAVA Stream的相关概念与用法介绍，基本就讲完了。我们再把焦点切回本文刚开始时提及的一个问题：\n\n**Stream相较于传统的foreach的方式处理stream，到底有啥优势**？\n\n根据前面的介绍，我们应该可以得出如下几点答案：\n\n- **代码更简洁**、偏声明式的编码风格，更容易体现出代码的逻辑意图\n- **逻辑间解耦**，一个stream中间处理逻辑，无需关注上游与下游的内容，只需要按约定实现自身逻辑即可\n- 并行流场景**效率**会比迭代器逐个循环更高\n- 函数式接口，**延迟执行**的特性，中间管道操作不管有多少步骤都不会立即执行，只有遇到终止操作的时候才会开始执行，可以避免一些中间不必要的操作消耗\n\n当然了，Stream也不全是优点，在有些方面也有其弊端：\n\n- 代码调测debug不便\n- 程序员从历史写法切换到Stream时，需要一定的适应时间\n\n---\n","tags":["Java","流操作","基础语法"],"categories":["开发"]},{"title":"Jetbrains系列快捷键-Win版","url":"/2024/04/12/Jetbrain系列快捷键-Win版/","content":"## 说明\n\n此快捷键说明我是翻译官方的快捷键说明的，方便查看，基于PHPStorm的官方Help来翻译的，其他系列的JetBrains软件应该都是一样的道理，其中如有错误，欢迎斧正。\n\n## 编辑\n\n------\n\n| 快捷键组合            | 说明                                                         |\n| --------------------- | ------------------------------------------------------------ |\n| Ctrl + Space          | 代码自动完成提示（选择）                                     |\n| Alt + Enter           | 显示意图动作和快速修复                                       |\n| Ctrl + P              | 参数信息（在调用方法参数忘记的时候，提示）                   |\n| Ctrl + Q              | 快速查找文件，可以查找当前类定义的文件等                     |\n| Ctrl + 鼠标滑过       | 基本信息                                                     |\n| Alt + Insert          | 生成代码...(细节需要多次操作会发现很有意思)                  |\n| Ctrl + O              | 重写方法（在PHPStorm中是重写父类方法，会有选择框）           |\n| Ctrl + I              | 实现方法（一般是指实现接口类或抽象类方法）                   |\n| Ctrl + Alt + T        | 环绕代码块 (if..else, try..catch, for, 等)                   |\n| Ctrl + /              | 单行注释(//)                                                 |\n| Ctrl + Shift + /      | 块注释 (/**/)                                                |\n| Ctrl + W              | 选择依次递增的代码块，具体使用目前来看比较少                 |\n| Ctrl + Shift + W      | 去掉当前选择返回上一个选择，类似于撤销选择，与上面的相反     |\n| Ctrl + Alt + L        | 格式化代码，一般来说，写的代码格式不整齐统一，这个很有用     |\n| Ctrl + Alt + I        | 自啮合线，这个解释不太好解释，测试结果就是会自动根据代码来进行对齐 |\n| Ctrl + D              | 复制当前行或选定的块                                         |\n| Ctrl + Y              | 删除插入符号所在行                                           |\n| Ctrl + Shift + J      | 智能线连接（HTML和JavaScript才有用）                         |\n| Ctrl + Enter          | 智能分割线 (HTML 和 JavaScript 才有用)                       |\n| Shift + Enter         | 开始新行，比如光标在当前行，不需要切换到行尾按Enter，直接按这个组合键即可 |\n| Ctrl + Shift + U      | 切换选中的英文文字的大小写，此处其实用到挺多的               |\n| Ctrl + Shift + ] 或 [ | 选择直到代码块的开始或结束，我之前不知道这个，其实很有用     |\n| Ctrl + Delete         | 删除从当前光标到当前单词结尾                                 |\n| Ctrl + Backspace      | 从光标位置删除到当前单词的开始                               |\n| Ctrl + + 或 -         | 这里是ctrl和加号或者减号产生的组合，可以折叠或展开当前代码块 |\n| Ctrl + F4             | 关闭活动中的tab                                              |\n| Ctrl + Shift + V      | 从历史粘贴                                                   |\n\n## 调试\n\n------\n\n*此处我是用得很少*\n\n| 快捷键组合    | 说明       |\n| ------------- | ---------- |\n| F8            | 跳过       |\n| F7            | 步进       |\n| Shift + F8    | 跳出       |\n| Alt + F8      | 表达式求值 |\n| F9            | 恢复程序   |\n| Ctrl + F8     | 切断断点   |\n| Ctrl+Shift+F8 | 查看断点   |\n\n## 运行\n\n------\n\n| 快捷键组合         | 说明                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| Shift + F10        | 运行                                                         |\n| Shift + F9         | 调试                                                         |\n| Ctrl + Shift + F10 | 从编辑器运行上下文配置（Run context configuration from editor），此处可能翻译不够准确 |\n| Ctrl + Shift + X   | 在命令行运行                                                 |\n\n## 搜索/替换\n\n| 快捷键组合         | 说明              |\n| ------------------ | ----------------- |\n| Ctrl + F/R         | 查找/替换         |\n| F3/Shift + F3      | 查找下一个/上一个 |\n| Ctrl + Shift + F/R | 在目录中查找/替换 |\n\n## 查找哪些地方使用\n\n| 快捷键组合           | 说明                                        |\n| -------------------- | ------------------------------------------- |\n| Alt + F7 / Ctrl + F7 | 当前文件查找被使用/在文件中查找哪些地方使用 |\n| Ctrl + Shift + F7    | 文件中搜索并在使用的地方高亮显示            |\n| Ctrl + Alt + F7      | 显示哪些地方被使用                          |\n\n## 导航\n\n------\n\n| 快捷键组合               | 说明                                                         |\n| ------------------------ | ------------------------------------------------------------ |\n| Ctrl + N                 | 跳转到指定类                                                 |\n| Ctrl + Shift + N         | 跳转到文件                                                   |\n| Ctrl + Alt + Shift + N   | 跳转到符号                                                   |\n| Ctrl + G                 | 跳转到第几行                                                 |\n| Alt + Right/Left         | 切换编辑器活动窗                                             |\n| Esc                      | Go to editor (from tool window)                              |\n| Ctrl + E                 | 弹出最近编辑文件，我也是在写这文档才知道，太方便了           |\n| Ctrl + Alt + Left/Right  | 导航前进/后退                                                |\n| Ctrl + Shift + Backspace | 跳转到最近编辑的代码位置                                     |\n| Alt + F1                 | 在任何视图中选择当前文件或符号                               |\n| Ctrl + B 或 Ctrl + Click | 跳到申明（如跳转到当前函数声明的地方，这个很常用，可以实操一下） |\n| Ctrl + Alt + B           | 与上面相反，跳到执行位置                                     |\n| Ctrl + Shift + I         | 打开快速定义查找                                             |\n| Ctrl + Shift + B         | 跳转到类型声明                                               |\n| Ctrl + U                 | 跳到超级方法(super-method)/超类 (super-class)                |\n| Alt + Up/Down            | 跳转到上一个或者下一个方法，在编辑一个类的时候，方便一个一个的方法进行查看 |\n| Ctrl + ] / [             | 跳转到代码块的开始或结束                                     |\n| F2 / Shift + F2          | 跳转到上一个或下一个高亮错误地方，这个检查代码语法错误很有用 |\n| F4 / Ctrl + Enter        | 编辑源代码/查看源代码                                        |\n\n## 重构\n\n------\n\n| 快捷键组合             | 说明                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| F5/F6                  | 复制/移动                                                    |\n| Alt + Delete           | 安全删除                                                     |\n| Shift + F6             | 重命名                                                       |\n| Ctrl + Alt + N         | 内联变量                                                     |\n| Ctrl + Alt + M/V/F/C   | 提取方法/变量/字段/常数(Method/Variable/Field/Constant)      |\n| Ctrl + Alt + Shift + T | 重构这段代码（显示所有可用的重构），比如if else if 这种语句转switch语句 |\n\n## VCS/本地历史\n\n------\n\n| 快捷键组合       | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| Alt + 反引号 (`) | ‘VCS’ 快速弹出，此处需要注意这个反引号在最左上角，和那个~符号在一起的，ESC键下面 |\n| Ctrl + K         | 提交项目到VCS                                                |\n| Ctrl + T         | 从 VCS 更新项目                                              |\n| Alt + Shift + C  | 显示最近更改                                                 |\n\n## 常用操作\n\n------\n\n| 快捷键组合         | 说明                                                       |\n| ------------------ | ---------------------------------------------------------- |\n| 快速按两次 Shift   | 搜索任何一个地方                                           |\n| Ctrl + Shift + A   | 查找方法(Action)                                           |\n| Alt + #[0-9]       | 打开相应的工具窗口（这个我也没搞明白）                     |\n| Ctrl + Alt + F11   | 开启或关闭全屏模式                                         |\n| Ctrl + Shift + F12 | 开启或关闭最大化编辑                                       |\n| Alt + Shift + F    | 添加到收藏列表（我觉得这个功能很神奇，不知道为啥要这么做） |\n| Alt + Shift + I    | 检查当前文件以及当前配置文件                               |\n| Ctrl + Alt + S     | 打开设置对话框（表示会与QQ默认快捷键冲突）                 |\n| Ctrl + Tab         | 在 tabs 和工具窗口间切换                                   |\n\n## 插入模板/片段(针对PHPstorm)\n\n------\n\n| 快捷键组合 | 说明                                         |\n| ---------- | -------------------------------------------- |\n| Alt + J    | 插入模板                                     |\n| eco        | ‘echo’ 语句                                  |\n| fore       | foreach(iterable_expr as $value) {…}         |\n| forek      | foreach(iterable_expr as $key => $value) {…} |\n| inc/inco   | ‘include’/‘include_once’ 语句                |\n| prif       | private function                             |\n| prof       | protected function                           |\n| pubf       | public function                              |\n| rqr/rqro   | ‘require’/‘require_once’ 语句                |\n| 更多...    | 其他自己尝试                                 |","tags":["转载","Jetbrains","便捷操作","开发技巧","快速录入"],"categories":["开发"]},{"title":"MarkDown的基本语法使用","url":"/2024/04/02/MarkDown的基本语法使用/","content":"\n# Markdown 语法简介\n\nMarkdown 语法是轻量级文本标记语言, Markdown简单易学，功能强大，且 Markdown 格式也可以转换成 html, pdf 等。\n\n接下来我就来介绍些 Markdown 的一些常用功能:\n\n### 标题\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n### **强调样式**\n\n```markdown\n*斜体*  或者 _斜体_\n**加粗**\n***斜体并加粗***\n~~划掉某些不需要的文字~~\n`标红强调`\n```\n\n![强调样式图片](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F1.png)\n\n### 排列\n\n**1.有序排列**\n\n```markdown\n1. 有序排列只需在文字前加 一个数字和一个英文句点\n2. 数字不管有序还是无序\n4. 结果都是有序的\n```\n\n1. 有序排列只需在文字前加 一个数字和一个英文句点\n2. 数字不管有序还是无序\n3. 结果都是有序的\n\n**2.无序排列**\n\n有三个符号表示无序排列 * + -\n\n```markdown\n* 无序排列\n+ 无序排列\n- 符号和文字之间要加一个字符的空格\n```\n\n- 无序排列\n- 无序排列\n- 符号和文字之间要加一个字符的空格\n\n### 分割线\n\n在一行用三个以上的 * 或者 - 或者 _ 即可新建一条分隔线。\n\n```markdown\n分割线\n****\n吼吼吼\n```\n\n分割线\n\n_______________\n\n吼吼吼\n\n## 制表\n\n语法说明：\n\n1.第一行为表头,第二行主要是分隔表头以及内容,第三行开始为表格内容\n\n2.第二行中输入 : 可对齐该列的内容。详情见下\n\n```markdown\n|     左对齐      |     居中对齐    | 右对齐          | \n| :------         | :-----:         | -------:        |\n| 今天天气怎么样  | 今天天气怎么样  | 今天天气怎么样  | \n|     有点热      |        有点热   |        有点热   | \n```\n\n| 左对齐         | 居中对齐       | 右对齐         |\n| -------------- | -------------- | -------------- |\n| 今天天气怎么样 | 今天天气怎么样 | 今天天气怎么样 |\n| 有点热         | 有点热         | 有点热         |\n\n### 任务列表\n\n在项目的缺陷、合并请求和描述中可添加任务列表\n\n```markdown\n- [x] 表示已经完成的任务\n- [ ] 表示正在进行的任务\n    - [x] files-test 1\n    - [ ] files-test 2\n    - [ ] files-test 3\n```\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F2.png)\n\n**区块引用**\n\n```markdown\n> Markdown的区块引用类似 email 中`> ` 的引用方式。\n> > 嵌套的引用也是支持的哦。\n>\n> 要注意的是`>`后面是有一个空格的。\n```\n\n### 代码框\n\n~~~markdown\n```javascript\nvar s = \"Hello world\";\nalert(s);\n```\n~~~\n\n![js代码图片](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F3.png)\n\n### 公式\n\n```markdown\n行内公式$`a^2+b^2=c^2`$\n```\n\n行内公式a^2+b^2=c^2*a*2+*b*2=*c*2\n\n~~~markdown\n这种公式会渲染成单独的一行\n```math\n\\textrm{Accuracy} = \\dfrac{N_{match}}{N_{all}}\n```\n~~~\n\n这种公式会渲染成单独的一行\n\n![数学公式图片](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F4.png)\n\n### HTML支持\n\n一些Markdown不支持的功能，可通过HTML实现\n\n```markdown\n<!-- 内容居中展示 -->\n<center>\n<img src=\"https://gnaixeuy.cn\" />\n<p>Hello GnaixEuy<p></center>\n</center>\n```\n\n### 插入图片\n\n```markdown\n内联式:\n![a](https://gnaixeuy.cn/image1.jpg)\n\n引用试:\n![a][logo]\n\n[logo]: https://gnaixeuy.cn/image1.jpg\n```\n\n## 插入链接\n\n链接的语法与图片的语法非常相似，只是差了一个 !\n\n链接的语法为 `[]()`\n\n```markdown\n[首页](http://www.gnaixeuy.cn)\n\n或者不输入内容然后使用[链接]\n[百度链接]: http://www.baidu.com\n```\n\n[首页](http://www.gnaixeuy.cn)\n[百度链接]: http://www.baidu.com","tags":["快速录入","markdown","基本语法"],"categories":["开发"]},{"title":"Hello World","url":"/2024/03/31/hello-world/","content":"# 欢迎来到我的互联网小窝 🌟\n\n---\n\n在这个小小的互联网角落，我想与大家分享关于生活和技术方面的点点滴滴。这个小小的博客站，是我记录成长、学习的地方，也是我们一起交流、成长、加油的平台！\n\n无论是生活中的小确幸，还是技术探索的心得，我都希望能在这里与你们一起见证。这个博客站将是我的个人成长之旅的见证者，也是我们共同努力的见证者。\n\n每一次的留言和互动，都是对我最大的鼓励和支持。让我们共同探索未知的领域，共同勇敢面对挑战，让彼此在这个无尽的网络世界中携手前行。\n\n希望你能常来做客，和我一起分享生活的美好，探讨技术的奥秘 💻。让我们一起努力，一起进步，让彼此在这个虚拟的世界里变得更加美好、充实！\n\n感谢你们，让这个小窝充满爱与温暖 🌺。期待我们在这里相遇，共同创造更多美好的回忆 🚀!\n\n---","categories":["大学生活"]},{"title":"便携小空调 - 为你的夏日带去清凉!","url":"/air-conditioner/index.html","content":"\n> 终于为博客安装上了便携小空调\n\n<style>\n.copyright-box a {\n  border-bottom: none !important;\n  padding: 0 !important;\n}\n</style>\n\n<div id=\"air-conditioner-vue\"></div>\n<script defer data-pjax src='https://blog-1301661174.cos.ap-shanghai.myqcloud.com/js/air-conditioner.js'></script>\n"},{"title":"我的装备","url":"/equipment/index.html"},{"title":"关于","url":"/about/index.html"},{"title":"分类","url":"/categories/index.html","content":"\n<style>\n  #libCategories .card-wrap:hover .card-info:after {\n    width: 300%;\n  }\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://npm.elemecdn.com/js-heo@1.0.11/3dCard/no3d.css\">\n\n<div id='libCategories'>\n<div id=\"lib-cards\" class=\"container\">\n\n<a href='javascript:void(0);' onClick='pjax.loadUrl(\"/categories/开发/\")'>\n<card data-image=\"https://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202008/4fcc988df33718aeed3f7be68f148e2c--2427704688.jpg\">\n<h1 slot=\"header\">开发</h1>\n<p slot=\"content\">开发学习之路。</p>\n</card>\n</a>\n\n<a href='javascript:void(0);' onClick='pjax.loadUrl(\"/categories/大学生活/\")'>\n  <card data-image=\"https://img1.baidu.com/it/u=989148365,1996007791&fm=253&fmt=auto&app=138&f=JPEG?w=889&h=500\">\n    <h1 slot=\"header\">大学生活</h1>\n    <p slot=\"content\">在大学期间发生的一些事儿。</p>\n  </card>\n</a>\n\n<a href='javascript:void(0);' onClick='pjax.loadUrl(\"/categories/生活日常/\")'>\n  <card data-image=\"https://img02.anheyu.com/adminuploads/1/2022/09/05/6315e142a69a9.webp\">\n    <h1 slot=\"header\">生活</h1>\n    <p slot=\"content\">和好朋友👬们一起经历的有趣事。</p>\n  </card>\n</a>\n\n</div>\n</div>\n\n<script src='https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.min.js' data-pjax></script>\n\n<script type=\"text/javascript\" src=\"https://npm.elemecdn.com/anzhiyu-theme-static@1.0.7/no3d/no3d.js\" data-pjax></script>\n"},{"title":"即刻短文","url":"/essay/index.html"},{"url":"/json/music.json","content":"[\n    {\n        \"name\": \"青花瓷\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"\n    },\n    {\n        \"name\": \"稻香\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"\n    },\n    {\n        \"name\": \"晴天\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"\n    },\n    {\n        \"name\": \"七里香\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"\n    },\n    {\n        \"name\": \"花海\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"\n    },\n    {\n        \"name\": \"反方向的钟\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"\n    },\n    {\n        \"name\": \"兰亭序\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"\n    },\n    {\n        \"name\": \"说好的辛福呢\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"\n    },\n    {\n        \"name\": \"等你下课 (with 杨瑞代)\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"\n    },\n    {\n        \"name\": \"我落泪情绪零碎\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"\n    },\n    {\n        \"name\": \"听妈妈的话\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"\n    },\n    {\n        \"name\": \"明明就\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"\n    },\n    {\n        \"name\": \"我是如此相信\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"\n    },\n    {\n        \"name\": \"发如雪\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"\n    },\n    {\n        \"name\": \"以父之名\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"\n    },\n    {\n        \"name\": \"园游会\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"\n    },\n    {\n        \"name\": \"本草纲目\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"\n    },\n    {\n        \"name\": \"龙卷风\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"\n    }\n]\n"},{"title":"友链","url":"/link/index.html"},{"title":"音乐馆","url":"/music/index.html"},{"title":"版权协议","url":"/privacy/index.html","content":"\n为了保持文章质量，并保持互联网的开放共享精神，保持页面流量的稳定，综合考虑下本站的所有原创文章均采用 cc 协议中比较严格的[署名-非商业性使用-禁止演绎 4.0 国际标准](https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh)。这篇文章主要想能够更加清楚明白的介绍本站的协议标准和要求。方便你合理的使用本站的文章。\n\n本站无广告嵌入和商业行为。违反协议的行为不仅会损害原作者的创作热情，而且会影响整个版权环境。强烈呼吁你能够在转载时遵守协议。遵守协议的行为几乎不会对你的目标产生负面影响，鼓励创作环境是每个创作者的期望。\n\n## 哪些文章适于本协议？\n\n所有原创内容均在文章标题顶部，以及文章结尾的版权说明部分展示。\n\n原创内容的非商用转载必须为完整转载且标注出处的`带有完整 url 链接`或`访问原文`之类字样的超链接。\n\n作为参考资料的情况可以无需完整转载，摘录所需要的部分内容即可，但需标注出处。\n\n## 你可以做什么？\n\n只要你遵守本页的许可，你可以自由地共享文章的内容 — 在任何媒介以任何形式复制、发行本作品。并且无需通知作者。\n\n## 你需要遵守什么样的许可？\n\n### 署名\n\n你必须标注内容的来源，你需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接提升阅读体验）。\n\n### 禁止商用\n\n本站内容免费向互联网所有用户提供，分享本站文章时禁止商业性使用、禁止在转载页面中插入广告（例如谷歌广告、百度广告）、禁止阅读的拦截行为（例如关注公众号、下载 App 后观看文章）。\n\n### 禁止演绎\n\n- 分享全部内容（无修改）\n  你需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接）\n- 分享部分截取内容或者衍生创作\n  目前本站全部原创文章的衍生品禁止公开分享和分发。如有更好的修改建议，可以在对应文章下留言。如有衍生创作需求，可以在评论中联系。\n- 作为参考资料截取部分内容\n  作为参考资料的情况可以无需完整转载，摘录所需要的部分内容即可，但需标注出处。\n\n## 什么内容会被版权保护\n\n包括但不限于：\n\n- 文章封面图片\n- 文章标题和正文\n- 站点图片素材（不含主题自带素材）\n\n## 例外情况\n\n本着友好互相进步的原则，被本站友链收录的博客允许博客文章内容的衍生品的分享和分发，但仍需标注出处。\n\n本着互联网开放精神，你可以在博客文章下方留言要求授权博文的衍生品的分享和分发，标注你的网站地址。\n\n## 网站源代码协议\n\n网站源代码（仅包含 css、js）的代码部分采用 GPL 协议。"},{"title":"标签","url":"/tags/index.html"}]