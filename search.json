[{"title":"江西武功山游记 | 迷雾与小雨中的山巅探险 🫣 (编写中)","url":"/2024/09/10/江西武功山游记 | 迷雾与小雨中的山巅探险/","content":"\n## 前言\n\n作为榕城出生的小子，从来不缺看海的机会，但巍峨高山的攀登，机会则是少之又少，恰逢同事起意邻省江西的武功山高山草甸是一个让人放松的好地方，遂同往。风光难忘，遗憾小有，故留迹。\n\n## 题记\n\n武功山，这座云雾缭绕的山峰，带着它独有的神秘与壮美吸引着无数探险者。然而，攀登之日，我却迎来了预料之外的天气——大雾笼罩，小雨如丝。一场本应满怀期待的登山，瞬间变成了与迷雾和雨水的博弈。山路湿滑，视野模糊，但正是在这种近乎迷失的环境中，我感受到了大自然的另一种魅力：它既考验耐力，也磨练心智。每一步向前，都是对未知的探索，每一滴雨水，都是对意志的洗礼。\n\n## 行程安排\n\n### 去程\n\n> • 车次: D3270\n> • 出发时间: 2024年9月7日 08:44\n> • 到达时间: 2024年9月7日 15:03\n> • 出发站: 厦门\n> • 到达站: 萍乡北\n> • 座位: 二等座 14车 07C号\n\n早晨从厦门乘坐D3270次动车出发，经过约6个小时的车程，于下午15:03抵达江西萍乡北站。虽然车程较长，但心情充满期待，窗外风景也让旅途变得不那么枯燥。到达萍乡北后，立刻转乘大巴前往武功山景区旁的民宿稍作休整。\n\n抵达与休整\n\n在民宿内稍作休息，整理装备，准备夜间的登山行程。武功山的天气预报显示有小雨和大雾，因此特别注意了防雨装备和保暖衣物的准备。经过短暂休息和补充能量后，夜幕降临，我与同行者正式开启了夜间攀登之旅。\n\n夜间攀登至金顶\n\n从民宿出发，夜间攀登武功山，用时大约5个多小时。在大雾和小雨的陪伴下，山路湿滑而陡峭，能见度极低，但攀登的过程充满了探险的刺激感。一路上，周围寂静无声，只有雨滴的轻拍和脚步声在耳边回响。随着不断前行，山间的冷空气让人精神更加集中。\n\n### 返程\n\n> • 车次: G2280\n> • 出发时间: 2024年9月8日 16:01\n> • 到达时间: 2024年9月8日 22:18\n> • 出发站: 萍乡北\n> • 到达站: 厦门北\n> • 座位: 二等座 07车 14F号\n\n攀登至金顶后，终于在凌晨抵达，等待日出的时间成为了整个行程的高潮。尽管天公不作美，没有看到理想中的日出，但夜间攀登的回忆依然值得珍藏。下山用了约4个小时，返程途中满怀收获感与疲惫感。\n\n### 登山开始\n\n抵达武功山山脚时，映入眼帘的是云雾缭绕的山巅，仿佛笼罩在一层神秘的面纱之下。山顶隐约可见的雨云，像是为这座巍峨的山峰披上了另一层厚重的威严。仰望这座高耸入云的山脉，我感到心潮澎湃，激动和期待交织在心头。\n\n这是我第一次站在武功山脚下，面对这样一座雄伟的山峰，内心充满了敬畏。大雾和小雨带来了不确定性，也让登山变得更加神秘和富有挑战。我与同行者简单交谈，讨论着接下来可能遇到的天气变化以及登顶的计划。\n\n在出发前，我检查了所有装备：冲锋衣，速干衣、登山杖、防滑鞋、登山背包、食物补给，当然还有我的帅帅🕶️一切都准备就绪。随着雨点的滴落，似乎大自然在提醒我，这将是一场与天气、与自我意志的博弈。买好门票后，我们背起行囊，踏上了这段未知而令人期待的旅程。\n\n## 迷雾中的攀登\n\n### 初段：武功山大门和灯光瀑布泉\n\n![名宿散步](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E6%B1%9F%E8%A5%BF%E6%AD%A6%E5%8A%9F%E5%B1%B1%E6%B8%B8%E8%AE%B0%20%7C%20%E8%BF%B7%E9%9B%BE%E4%B8%8E%E5%B0%8F%E9%9B%A8%E4%B8%AD%E7%9A%84%E5%B1%B1%E5%B7%85%E6%8E%A2%E9%99%A9/%E5%90%8D%E5%AE%BF%E4%BC%91%E6%95%B4%E6%95%A3%E6%AD%A5.jpg)\n\n到达武功山景区后，已经是下午时分。我们找到了一家靠近山脚的民宿，决定在这里稍作休整，积蓄体力，为即将到来的夜爬做准备。民宿的环境非常朴素，但格外温馨，店家热情地招待了我们。\n\n简单收拾完行李后，我们享用了地道的农家菜（还可以还可以，对我来说没什么槽点，就是有点辣🥵）。热腾腾的饭菜驱散了一路奔波的疲惫，也让我们的体力得到了补充。吃完后，我们在房间里稍微休息，躺在床上闭目养神，心中却不时涌起对夜爬的期待和紧张。\n\n![夜爬武功山大门](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E6%B1%9F%E8%A5%BF%E6%AD%A6%E5%8A%9F%E5%B1%B1%E6%B8%B8%E8%AE%B0%20%7C%20%E8%BF%B7%E9%9B%BE%E4%B8%8E%E5%B0%8F%E9%9B%A8%E4%B8%AD%E7%9A%84%E5%B1%B1%E5%B7%85%E6%8E%A2%E9%99%A9/%E5%A4%9C%E7%88%AC%E6%AD%A6%E5%8A%9F%E5%B1%B1%E5%A4%A7%E9%97%A8.jpg)\n\n晚上十点，天色已完全黑了下来。经过充分的休息和准备，我们背上装备，带着头灯，向山脚进发。大雾和小雨依旧笼罩着山巅，但此时的我们已做好了充足的心理准备，迎接这一场夜幕下的攀登。\n\n### 途中的惊喜\n\n- 尽管大雾笼罩，偶尔能看到的景色，或是雾中的神秘感。\n- 在途中可能遇到的小动物、植物，或者其他登山客的打招呼。\n- 如果有休息点或小亭子，可以描述当时的休息情况（补充能量、避雨等）。\n\n## 山巅探险：在云雾中寻找方向\n\n### 迷路与选择\n\n- 当你接近山顶时，天气是否更加恶劣？能见度变得更低？\n- 描述因为大雾或天气变化，可能遇到的困难（比如迷路、判断错误的路线等）。\n- 如何找到正确的方向，克服这些困难继续前行？\n\n### 到达高山草甸\n\n- 终于到达标志性的高山草甸时的感受，可以写出因大雾而让人感到陌生又神秘的景色。\n- 描述草甸的独特风貌，大雾与小雨交织下的山巅景象，或许看不到远方的壮丽景色，但雾中别有一番风味。\n\n## 下山记：湿滑中的谨慎脚步\n\n### 回程中的小心翼翼\n\n- 下山过程同样充满挑战，地面湿滑让每一步都格外谨慎。\n- 可以写下雨衣、鞋子被打湿的感受，以及回程时对温暖和干燥的渴望。\n\n### 天气渐变与归程\n\n- 天气是否有所好转？大雾逐渐散去，或者雨势加大？\n- 最终平安返回时的心情，对这次登山的总结与反思。\n\n## 结语\n\n- 总结整个旅途的感受与收获。\n- 天气虽然恶劣，但依然是一场难忘的探险，或许还会有下一次的挑战？\n\n## 附录\n\n- 攻略建议：天气预报的重要性、登山装备建议（特别是防水用品）、注意事项等。\n\n---\n\n这个框架基本涵盖了攀登过程中的每个阶段。你可以填充个人体验，比如详细描述大雾中的迷茫、湿滑地面的危险，以及每个阶段的心情变化。这种游记既有细节又能抓住读者的好奇心。你觉得这适合吗？\n","tags":["特种兵旅行","生活","出行","武功山"],"categories":["生活"]},{"title":"RBAC 鉴权模式概论简述","url":"/2024/09/02/RBAC鉴权模式概论简述/","content":"\n## RBAC\n\nRBAC 是 Role-Based Access Control 的首字母，翻译成中文就是基于角色的权限访问控制，即用户通过角色与权限进行关联。\n\n一般一个用户可以有多个角色，每一个角色拥有若干权限，如此就构成了“用户-角色-权限”的授权模型，在这种模型中，用户和角色之间、角色和权限之间都是多对多的关系。\n\nRBAC 是一种思想，根据 RBAC 思想进行数据库设计以便更好的完成权限控制。\n\n在我们实际的工作中，权限管理系统是重复开发效率最高的一个模块之一，而在多套系统中，对应的权限管理只能满足自身的系统管理需要，无论是在数据库设计、权限访问和权限管理机制方式上都可能不同，这种不一致性也就导致了一些弊端：\n\n- 维护多台系统，重复造轮子；\n- 用户管理、组织机制等数据重复维护，数据的完整性、一致性很难得到保障。\n\nRBAC 是基于不断实践之后提出的一个比较成熟的访问控制方案，实践表明，采用基于 RBAC 模型的权限管理系统具有以下优势：\n\n- 重用性强；\n- 能够灵活的支持应用系统的安全策略，并对应用系统的变化有很大的伸缩性；\n- 由于角色与权限的数据更新频率比角色与用户的数据更新频率要低的多，减少了授权管理的复杂性，降低管理开销；\n- 在操作上，权限分配直观、容易理解、便于使用。\n\n## RBAC 模型分类\n\nRBAC 模型可以分为 RBAC0、RBAC1、RBAC2 和 RBAC3 四种，其中 RBAC0 是基础，也是最简单的，相当于是底层逻辑，其余三种都是 RBAC0 的升级版。\n\n一般情况下 RBAC0 就可以满足常规的权限管理系统设计了。\n\n### RBAC0 模型\n\n最简单的用户、角色、权限模型。这里面又包含了2种：\n\n- 用户和角色是多对一关系，即：一个用户只充当一种角色，一种角色可以有多个用户担当；\n- 用户和角色是多对多关系，即：一个用户可同时充当多种角色，一种角色可以有多个用户担当。\n\n那什么时候该使用多对一的权限体系，什么时候又该使用多对多的权限体系呢？\n\n如果系统功能比较单一，使用人员较少，岗位权限相对清晰且确保不会出现兼岗的情况，此时可以考虑用多对一的权限体系。\n\n其余情况尽量使用多对多的权限体系，保证系统的可扩展性。如：张三既是行政，也负责财务工作，那张三就同时拥有行政和财务两个角色的权限。\n\n### RBAC1 模型\n\n相对于 RBAC0 模型，增加了子角色，引入了继承概念，即子角色可以继承父角色的所有权限。\n\n使用场景：如某个业务部门，有经理、主管、专员。主管的权限不能大于经理，专员的权限不能大于主管，如果采用 RBAC0 模型做权限系统，极可能出现分配权限失误，可能出现主管拥有经理都没有的权限的情况，而 RBAC1 模型就很好解决了这个问题，创建完经理角色并配置好权限后，主管角色的权限继承经理角色的权限，并且支持在经理权限上删减主管权限。\n\n### RBAC2 模型\n\n基于 RBAC0 模型，增加了对角色的一些限制：角色互斥、基数约束、先决条件角色等。\n\n- 角色互斥：同一用户不能分配到一组互斥角色集合中的多个角色，互斥角色是指权限互相制约的两个角色。案例：财务系统中一个用户不能同时被指派给会计角色和审计员角色；\n- 基数约束：一个角色被分配的用户数量受限，它指的是有多少用户能拥有这个角色。例如：一个角色专门为公司 CEO 创建的，那这个角色的数量是有限的；\n- 先决条件角色：指要想获得较高的权限，要首先拥有低一级的权限。例如：先有副总经理权限，才能有总经理权限；\n- 运行时互斥：例如允许一个用户具有两个角色的成员资格，但在运行中不可同时激活这两个角色。\n\n### RBAC3 模型\n\nRBAC3 模型：称为统一模型，它包含了 RBAC1 和 RBAC2，利用传递性，也把 RBAC0 包括在内，综合了 RBAC0、RBAC1 和 RBAC2 的所有特点。\n\n## 基于 RBAC 模型实现数据权限\n\n### 权限\n\n权限是资源的集合，这里的资源指的是软件中所有的内容，包括模块、菜单、页面、字段、操作功能（增删改查）等等具体的权限配置上，目前形式多种多样，根据我个人的理解，可以将权限分为：页面权限、操作权限和数据权限。\n\n- 页面权限：所有系统都是由一个个的页面组成，页面再组成模块，用户是否能看到这个页面的菜单、是否能进入这个页面就称为页面权限。\n- 操作权限：用户凡是在操作系统中的任何动作、交互都是操作权限，如增删改查等。\n- 数据权限：一般业务管理系统都有数据私密性的要求：哪些人可以看到哪些数据，不可以看到哪些数据。简单举个例子：某系统中有销售部门，销售专员负责推销商品，销售主管负责管理销售专员日常工作，经理负责组织管理销售主管作业。按照实际理解，‘销售专员张三’登录时，只能看到自己负责的数据；销售主管2登录时，能看到他所领导的所有业务员负责的数据，但看不到其他团队业务员负责的数据。\n\n### 什么是数据权限？\n\n数据权限是指用户是否能够看到某些数据。\n\n说的通俗点就是设置用户只能查看哪些数据，这就是数据权限，主要应用在数据有保密要求或数据量大或数据非常敏感的，需按用户或角色来进行区分时。\n\n例如：财务主管在后台可以看到公司所有人的工资流水，但普通员工只能看到自己的工资流水。\n\n在这里可能有的同学或许认为：既然我们的权限是跟角色关联，为什么“查看工资流水”这个权限精确到每个用户了呢？其实这就是 RBAC2 的一种，权限与角色关联后增加了限制条件，不过这种限制条件无法在页面上灵活配置，数据权限的颗粒度由粗到细可以分为菜单级、栏目级、字段级，一般配置页面都可以灵活操作。\n\n如果还不太容易理解的话，我们再举个例子，在开发 SCRM 系统时，系统的使用者涉及到了销售、财务等工作人员，他们对数据是非常敏感的，因此要求对数据权限进行控制。而基于 SAAS 的产品，更多的需要控制好各自公司的数据，如设置只能看本公司或者本部门的数据，对于特殊的领导，可能需要跨部门的数据， 因此程序不能硬编码哪个领导该访问哪些数据，需要进行后台的权限和数据权限的控制，比较特殊的是系统管理员 admin，默认系统管理员 admin 拥有所有数据权限，默认角色拥有所有数据权限。在我们 SCRM 系统中数据权限支持以下几种：\n\n- 全部数据权限；\n- 自定义数据权限；\n- 部门数据权限；\n- 部门及以下数据权限；\n- 仅本人数据权限。\n\n### 如何实现数据权限\n\n要实现数据权限有多种方式：\n\n- 可以利用 RBAC1 模型，通过角色分级来实现。\n- 在“用户-角色-权限”的基础上，增加用户与组织的关联关系，用组织决定用户的数据权限。\n\n当然，具体的实现方案还要结合具体的业务场景以及项目的现状来确定使用什么样的技术实现方案是最优。\n\n## 用户组的使用\n\n当平台用户基数增大，角色类型增多时，如果直接给用户配角色，管理员的工作量就会很大。\n\n这时候我们可以引入一个概念“用户组”，就是将相同属性的用户归类到一起。\n\n例如：加入用户组的概念后，可以将部门看做一个用户组，再给这个部门直接赋予角色（一万个员工，部门可能就几十个），使部门拥有部门权限，这样这个部门的所有用户都有了部门权限，而不需要为每一个用户再单独指定角色，极大的减少了分配权限的工作量，同时也可以为特定的用户指定角色，这样用户除了拥有所属用户组的所有权限外，还拥有自身特定的权限。\n\n用户组的优点，除了减少工作量，还有更便于理解、增加多级管理关系等。如：我们在进行组织机构配置的时候，除了加入部门，还可以加入科室、岗位等层级，来为用户组内部成员的权限进行等级上的区分。\n\n## 实例分析\n\n上面介绍了那么多关于 RBAC 的相关内容，那么如何设计 RBAC 权限系统呢？\n\n首先，我们思考一下一个简单的权限系统应该具备哪些内容？答案显而易见，RBAC 模型：用户-角色-权限，所以最基本的应该具备用户、角色、权限这三个内容。\n\n接下来，我们思考究竟如何将三者关联起来。角色作为枢纽，关联用户、权限，所以在 RBAC 模型下，我们应该：创建一个角色，并为这个角色赋予相应权限，最后将角色赋予用户。\n\n其实说到这里，大家应该就明白了，就是我们开发一个后台管理系统时的普通的角色权限的设计，这就是 RBAC 模型。\n\n现在，基本的流程逻辑已经抽象出来了，接下来，分析该如何设计呢？常规情况下的设计是这样的：\n\n1. 第一步，需要角色管理列表，在角色管理列表能快速创建一个角色且创建角色的同时能为角色配置权限，并且支持为创建成功的角色列表能随时进行权限配置的的修改；\n2. 第二步，需要用户管理列表，在用户管理列表能快速添加一个用户且添加用户时有让用户关联角色的功能。\n\n常规情况下简单的权限系统设计就包含以上两步，接下来为大家进行实例分析，分析一下 RBAC1 中角色分级具体如何设计？\n\n在 RBAC0 的基础上，加上角色等级这个字段。\n\n权限分配规则制定：低等级角色只能在高等级角色权限基础上进行删减权限，比如等级 1 可以自由选择分配权限；等级 2 只能在等级 1 的基础上删减权限；等级 3 则只能在等级 2 的基础上删减权限，以此类推。\n\n---\n\n以上就是简单的 RBAC 系统设计，若需更复杂的，还需要研发人员根据上面的分析结合具体需求自行揣摩思考，万变不离其宗，理解清楚 RBAC 模型后，结合自己的业务就可以设计出一套符合自己平台需求的角色权限系统。\n","tags":["RBAC","鉴权","理论概述","角色","权限控制"],"categories":["开发"]},{"title":"基于IOS 18 / macOS 15 Beta 1 强制开启新版Siri UI","url":"/2024/06/18/基于IOS18 Beta 1 强制开启新版Siri UI/","content":"你可能已经在X、Threads等平台上看到过分享iOS 18中新Siri UI的帖子，但[iOS 18 Develop Beta 1](https://forum.betaprofiles.com/t/whats-new-in-ios-18-beta-1/13444/7)中目前还没有添加任何与Siri相关的新功能。\n\n值得庆贺的好消息是！你可以通过下面的一些提示尽早体验新的Siri用户界面。\n\n![enable-new-siri-ui](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/enable-new-siri-ui.jpg)\n\n⚠️ **首先要澄清的是，这只是激活了新的Siri用户界面；与Apple Intelligence相关的功能此时将不起作用。**\n\n新的Siri UI适用于所有运行iOS 18/iPadOS 18 Developer Beta 1的iPhone和iPad。然而，只有M1或A17 Pro (Iphone 15 Pro)及以上芯片的设备在发布时才会使用Apple Intelligence功能。\n\n## 准备活动\n\n- 在执行以下任何步骤之前，你都应该备份设备。你的数据非常宝贵，如果你不备份你的设备，我将不承担任何责任。\n- 暂时关闭**设置中的“查找我的iPhone/iPad”[你的Apple ID]-“查找我”-“查找iPhone或iPad”**\n- 你需要一台Mac或Windows PC\n\n## 在iPhone上启用新的Siri UI\n\n### For Mac\n\n1. 下载并安装Cowabunga Lite for Mac（你可以在谷歌上轻松找到它）。\n\n2. 通过USB数据线连接设备。\n\n3. 打开Cowabunga Lite，然后单击左列中的**自定义操作**选项卡。\n\n   ![enable-new-siri-ui-cowabunga-lite-1](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/select.png)\n\n4. 单击**Import.cooperation**按钮，选择*iOS_18_Siri.cooperation*文件（[在此处下载](https://bit.ly/siri-18)).\n\n   ![enable-new-siri-ui-cowabunga-lite-2](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/import.png)\n\n5. 单击**编辑**按钮，**确保选中启用选项**。\n\n   ![enable-new-siri-ui-cowabunga-lite-5](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/click.png)\n\n   ![enable-new-siri-ui-cowabunga-lite-6](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/checkout.png)\n\n6. 单击左列中的**应用**选项卡，然后单击**应用调整**按钮。\n\n   ![enable-new-siri-ui-cowabunga-lite-4](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/apply.png)\n\n这个过程可能需要一段时间。你的设备将重新启动，你将看到“设置”屏幕。\n\n⚠️如果你看到屏幕上显示“iPhone部分设置”，**请不要点击蓝色大按钮**。你必须点击**“继续部分安装”**，你的数据将正常。\n\n### For Windows\n\n1. 暂无设备，自行领悟，欢迎评论补充👏\n\n### 效果如下\n\n![iphone Siri 效果](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/iphone.png)\n\n## 使用macOS Sequoia Beta 1在Mac上启用新的Siri UI\n\n1. 打开你的终端如 **Terminal/Warp/Iterm 2**\n\n2. 逐个输入以下命令，每个命令后按回车键。\n   ```shell\n\ndefault writes com.apple.assistant bypassDeviceSupportsSAE -bool true\n\n```\n   和\n```shell\n\n   killall Siri\n\n```\n\n   ![enable-new-siri-ui-using terminal on mac](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/terminal.png)\n\n3. 之后重新启动Mac，在菜单栏中看到新的Siri图标。\n\n![new siri ui on mac](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EIOS18%20macOS%2015%20Beta%201%20%E5%BC%BA%E5%88%B6%E5%BC%80%E5%90%AF%E6%96%B0%E7%89%88Siri%20UI/mac%20siri.png)\n","tags":["macOS","破解","强制开启功能","ios","beta系统","尝鲜派"],"categories":["开发"]},{"title":"基于Quantumult X破解ChatGPT macOS客户端强制启动","url":"/2024/05/15/基于Quantumult X破解ChatGPTmacOS客户端强制启动/","content":"# 基于Quantumult X破解ChatGPT macOS客户端强制启动 体验 GPT-4o：绕过客户端限制的技巧\n\n近日，OpenAI 发布了备受期待的 GPT-4o 版本，并同时推出了针对 macOS 的官方客户端。GPT-4o 作为最新一代的语言模型，相较于之前的版本，带来了多项令人兴奋的新特性。然而，由于客户端的限制，普通用户在第一时间无法体验到这些新功能。为了帮助用户绕过客户端的校验并尽快体验到 GPT-4o 的强大功能，这篇博文将介绍一些可行的方式。\n\n## GPT-4o 的新特性\n\n1. **增强的语言理解和生成能力**：GPT-4o 在语言理解和生成方面有了显著的提升，能够生成更加流畅、连贯和自然的文本。\n2. **更强的上下文处理能力**：新版本可以处理更长的上下文，使得对话和文本生成更加连贯，适用于更多复杂场景。\n3. **多模态处理能力**：GPT-4o 支持文本、图像等多种数据类型的输入，进一步扩展了其应用范围。\n4. **改进的安全和道德规范**：新版本在内容审核和生成方面引入了更严格的标准，减少了生成有害或不适当内容的可能性。\n5. **优化的性能和响应速度**：通过技术优化，GPT-4o 的响应速度更快，性能更加稳定，提升了用户体验。\n6. ***语言理解能力有效提升***：能够通过用户语气预测其当下心情，响应不同结果\n\n## 博文目的\n\n由于官方客户端对用户权限的限制，许多普通用户无法在第一时间体验到 GPT-4o 的强大功能。本文旨在通过介绍一些技术手段，帮助用户绕过这些限制，从而尽早享受到最新技术带来的便利和乐趣。这些方法虽然涉及一定的技术复杂度，但在详细的指导下，用户可以顺利操作并体验到 GPT-4o 的全部功能。\n\n---\n\n## 破解原理\n\n在开始之前，请注意，此操作可能违反 OpenAI 的服务条款。请谨慎使用并确保了解可能带来的风险。\n\n### 抓包分析\n\n通过对 ChatGPT macOS 客户端的抓包分析，我们发现关键在于客户端与服务器之间的初始化请求。具体来说，客户端在启动时会向以下接口发送请求：<https://ab.chatgpt.com/v1/initialize>\n\n这个请求的响应报文中包含了判断当前用户是否合法的关键字段。OpenAI 官方仅仅以一个字段用于区分用户是否允许进入客户端。\n\n### 所需工具\n\n要实现绕过客户端校验的目的，我们可以使用以下任一网络工具或抓包软件来重写响应包：\n\n- **Quantumult X**：一款强大的网络调试工具，支持多种协议的抓包和重写功能。\n- **Surge**：用于网络调试和管理的高级工具，具有强大的重写规则配置能力。\n- **Charles**：跨平台的网络抓包工具，支持 HTTP/HTTPS 的抓包和修改。\n- **Wireshark**：功能强大的网络协议分析工具，可以捕获并分析网络流量。\n\n### 实现步骤\n\n1. **安装并配置抓包工具**：\n   - 下载并安装上述任意一款抓包工具，本文以 ***Quanmult X*** 为例。\n   - 根据工具的使用说明进行配置，使其能够抓取 ChatGPT macOS 客户端的网络请求。\n\n2. **启动抓包工具并运行 ChatGPT 客户端**：\n   - 打开抓包工具，并启动 ChatGPT macOS 客户端。\n   - 观察并找到与 `https://ab.chatgpt.com/v1/initialize` 接口相关的请求和响应。\n\n3. **分析并重写响应包**：\n   - 找到 `https://ab.chatgpt.com/v1/initialize` 请求的响应包。\n   - 确认响应包中用于区分用户是否允许进入客户端的关键字段（例如 `isAllowed` 字段）。\n   - 使用抓包工具的重写功能修改该字段的值，使其始终返回允许的状态。\n\n4. **验证修改效果**：\n   - 重新启动 ChatGPT 客户端，确认是否成功绕过校验进入客户端。\n\n#### 示例：使用 Charles 重写响应包\n\n1. **启动 Charles 并配置代理**：\n   - 打开 Charles，设置代理服务器以捕获 macOS 客户端的流量。\n   - 在 macOS 的网络设置中配置代理，指向 Charles。\n\n2. **抓取并找到初始化请求**：\n   - 启动 ChatGPT 客户端，观察 Charles 中捕获的请求。\n   - 找到 `https://ab.chatgpt.com/v1/initialize` 请求及其响应。\n\n3. **重写响应包**：\n   - 在 Charles 中添加重写规则：\n     - 选择 `Tools` > `Rewrite`。\n     - 添加新的重写规则，将 `Bool` 类型的值修改为允许的状态（例如 `true`）。\n\n4. **应用重写规则并测试**：\n   - 启用重写规则，重启 ChatGPT 客户端。\n   - 验证是否成功绕过了客户端的校验。\n\n通过上述方法，用户可以绕过 ChatGPT macOS 客户端的校验，尽早体验到 GPT-4o 的新特性。然而，再次强调，此操作可能违反 OpenAI 的服务条款，请谨慎使用并确保了解可能带来的风险。\n\n---\n\n## 实践部分\n\n### 第一步：通过 Quantumult X 的 HTTP 监听功能进行抓包\n\n- > #### 1. 安装 Quantumult X\n  >\n  > 首先，确保你已经在你的设备上安装了 Quantumult X。你可以从 [Quantumult X 官网](https://quantumult.app) 或 App Store 下载并安装该应用。\n  >\n  > #### 2. 配置 Quantumult X 进行 HTTP 监听\n  >\n  > 1. **打开 Quantumult X 应用**：\n  >    - 启动 Quantumult X，进入主界面。\n  >\n  > 2. **设置代理模式**：\n  >    - 在主界面下方点击“Settings”。\n  >    - 在“Settings”菜单中，选择“Proxy Settings”。\n  >    - 配置一个 HTTP/HTTPS 代理，确保 Quantumult X 能够捕获所有网络流量。\n  >    - 记下代理服务器的 IP 地址和端口号。\n  >\n  > 3. **在 macOS 上配置代理**：\n  >    - 打开 macOS 系统偏好设置，进入“网络”设置。\n  >    - 选择当前使用的网络连接（例如 Wi-Fi 或以太网），点击“高级”。\n  >    - 进入“代理”标签，勾选“Web 代理 (HTTP)”和“安全 Web 代理 (HTTPS)”。\n  >    - 在“代理服务器地址”中输入 Quantumult X 显示的 IP 地址，在“端口”中输入 Quantumult X 的端口号。\n  >    - 点击“确定”保存设置，然后应用更改。\n  >\n  > #### 3. 启动抓包功能\n  >\n  > 1. **启动 Quantumult X 的抓包功能**：\n  >    - 在 Quantumult X 主界面，点击左下角的“抓包”图标（Packet Capture）。\n  >    - 确保抓包功能处于启用状态。\n![圈x Http抓取界面](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/%E6%88%AA%E5%B1%8F2024-05-15%2010.53.24.png)\n  > ![圈x Http抓取启动界面](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/%E6%88%AA%E5%B1%8F2024-05-15%2010.38.03.png)\n  > 2. **运行 ChatGPT macOS 客户端**：\n  >    - 打开 ChatGPT macOS 客户端，并进行正常使用操作。\n  >    - Quantumult X 将开始捕获并显示所有网络请求和响应。![macos ChatGPT client](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/GPT%20macOS%20login%20fail.png)\n  >\n  > #### 4. 分析捕获的请求\n  >\n  > 1. **找到关键请求**：\n  >    - 在 Quantumult X 抓包界面，找到 `https://ab.chatgpt.com/v1/initialize` 的请求。![找到关键请求](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/%E6%89%BE%E5%88%B0%E5%85%B3%E9%94%AE%E8%AF%B7%E6%B1%82.png)\n  >    - 点击该请求查看详细信息，包括请求头、请求体和响应体。![响应体详情](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png)\n  >\n  > 2. **分析响应报文**：\n  >    - 在响应体中，查找用于区分用户是否允许进入客户端的关键字段。\n  >    - 记录该字段的名称和值。\n  >\n  > 通过上述步骤，你可以成功使用 Quantumult X 抓取 ChatGPT macOS 客户端发送的所有请求，并找出关键的初始化请求和响应报文。下一步将介绍如何利用这些信息，通过修改响应包来绕过客户端的校验。\n  >\n  > 在继续之前，请务必确保你已经理解并同意可能的法律和服务条款限制。\n\n  捕获报文如下:\n\n```json\n{\n    \"statsigMetadata\": {\n        \"stableID\": \"F6D33F09-0ADA-467B-85D1-012515A74429\",\n        \"locale\": \"zh_CN\",\n        \"deviceModel\": \"arm64\",\n        \"appIdentifier\": \"com.openai.chat\",\n        \"deviceOS\": \"macOS\",\n        \"language\": \"zh-Hans-CN\",\n        \"sdkType\": \"ios-client\",\n        \"systemVersion\": \"14.5.0\",\n        \"systemName\": \"macOS\",\n        \"appVersion\": \"1.2024.134\",\n        \"sdkVersion\": \"1.40.1\",\n        \"sessionID\": \"1EB0F94D-1567-42D7-8C45-ADF3642B507C\"\n    },\n    \"sinceTime\": 1716102005777,\n    \"previousDerivedFields\": {\n        \"country\": \"CA\",\n        \"ip\": \"163.123.192.52\",\n        \"user_agent\": \"ChatGPT/1715807927 CFNetwork/1496.0.7 Darwin/23.5.0\"\n    },\n    \"hash\": \"djb2\",\n    \"user\": {\n        \"statsigEnvironment\": {\n            \"tier\": \"production\"\n        },\n        \"userID\": \"user-bJTtI9UeN32dht7fxc3R8CXD\",\n        \"custom\": {\n            \"app_environment\": \"app_store\",\n            \"apple_platform\": \"macOS\",\n            \"apple_os_version\": \"14.5.0\",\n            \"client_type\": \"ios\",\n            \"plan_type\": \"free\",\n            \"workspace_id\": \"facfb951-5a13-45e2-b2a4-221ac5fde784\",\n            \"has_paid_plan\": false\n        },\n        \"appVersion\": \"1.2024.134\",\n        \"privateAttributes\": {\n            \"email\": \"<suyuexiang412@gmail.com>\"\n        }\n    }\n}\n\n```\n\n### 第二步：编写重写响应体的脚本\n\n  我们将使用 JavaScript 编写一个脚本，重写 `https://ab.chatgpt.com/v1/initialize` 接口的响应，以绕过客户端的校验。\n\n#### 1. 编写脚本\n\n  首先，编写一个 JavaScript 脚本，用于重写响应体：\n\n  ```javascript\n  let status = $response.status;\n  let headers = $response.headers;\n  let body = $response.body;\n  \n  // 如果需要对 JSON 响应内容进行处理，可以在此进行\n  try {\n      let obj = JSON.parse(body);\n  \n      function replaceFalseWithTrue(obj) {\n          for (let key in obj) {\n              if (obj[key] === false) {\n                  obj[key] = true;\n              } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n                  replaceFalseWithTrue(obj[key]);\n              }\n          }\n      }\n  \n      replaceFalseWithTrue(obj);\n      body = JSON.stringify(obj);\n  } catch (e) {\n      // 如果不是 JSON 响应，则不做处理\n  }\n  \n  // 强制修改状态码为200\n  status = 200;\n  \n  $done({ status, headers, body });\n  ```\n\n#### 2. 在 Quantumult X 中应用脚本\n\n  ​ 1. **打开 Quantumult X 应用**：\n\n  ​ • 启动 Quantumult X，进入主界面。\n\n  ​ 2. **添加重写规则**：\n\n  ​ • 在主界面下方点击“Settings”。\n\n  ​ • 选择“Rewrite”进入重写规则配置界面。  ![添加重写规则](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/%E6%B7%BB%E5%8A%A0%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99%E7%95%8C%E9%9D%A2.png)\n\n  ​ 3. **配置重写规则**：\n\n  ​ • 点击右上角的“+”按钮添加新规则。\n\n  ​ • 在“URL”字段中输入 <https://ab.chatgpt.com/v1/initialize$>\n\n  ​ • 在“Script”字段中粘贴上面的 JavaScript 脚本的地址如<https://raw.githubusercontent.com/GnaixEuy/openai_chatgpt_macos_crack/main/crack_chatgpt_macos.js>。\n\n  ​ 4. **启用重写规则**：\n\n  ​ • 保存并启用重写规则。\n\n  ​ • 确保重写功能处于启用状态。![添加规则界面](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/%E6%B7%BB%E5%8A%A0%E8%A7%84%E5%88%99%E7%95%8C%E9%9D%A2.png)\n\n#### 3. 验证效果\n\n​ 1. **重启 ChatGPT 客户端**：\n\n​ • 关闭并重新启动 ChatGPT macOS 客户端。\n\n​ • Quantumult X 将自动应用重写规则，并修改 <https://ab.chatgpt.com/v1/initialize> 接口的响应。\n\n​ 2. **检查客户端状态**：\n\n​ • 确认客户端是否成功绕过校验并允许访问。![破解成功](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/GPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A0%B4%E8%A7%A3%E6%88%90%E5%8A%9F.png)\n![破解成功2](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/%E5%9F%BA%E4%BA%8EQuantumult%20X%E7%A0%B4%E8%A7%A3ChatGPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8/GPT%20macOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A0%B4%E8%A7%A3%E6%88%90%E5%8A%9F2.png)\n\n通过上述步骤，你可以成功编写和应用重写响应体的脚本，利用 Quantumult X 绕过 ChatGPT macOS 客户端的校验。如果有任何问题或需要进一步帮助，请随时告诉我。\n\n---\n\n本文在ChatGPT For macOS客户端的协助下编写完成。\n","tags":["OpenAi","ChatGPT","macOS","破解ChatGPT客户端"],"categories":["开发"]},{"title":"Java Stream流操作，让代码更加的优雅","url":"/2024/04/19/Stream流操作，让代码更加的优雅/","content":"\n在JAVA中，涉及到对`数组`、`Collection`等集合类中的元素进行操作的时候，通常会通过**循环的方式**进行逐个处理，或者**使用Stream**的方式进行处理。\n\n例如，现在有这么一个需求：\n\n> 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n\n在**JAVA7及之前**的代码中，我们会可以照如下的方式进行实现：\n\n```java\n/**\n * 【常规方式】\n * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n *\n * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔\n * @return 倒序输出符合条件的单词列表\n */\npublic List<String> sortGetTop3LongWords(@NotNull String sentence) {\n    // 先切割句子，获取具体的单词信息\n    String[] words = sentence.split(\" \");\n    List<String> wordList = new ArrayList<>();\n    // 循环判断单词的长度，先过滤出符合长度要求的单词\n    for (String word : words) {\n        if (word.length() > 5) {\n            wordList.add(word);\n        }\n    }\n    // 对符合条件的列表按照长度进行排序\n    wordList.sort((o1, o2) -> o2.length() - o1.length());\n    // 判断list结果长度，如果大于3则截取前三个数据的子list返回\n    if (wordList.size() > 3) {\n        wordList = wordList.subList(0, 3);\n    }\n    return wordList;\n}\n```\n\n在**JAVA8及之后**的版本中，借助Stream流，我们可以更加优雅的写出如下代码：\n\n```java\n/**\n * 【Stream方式】\n * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n *\n * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔\n * @return 倒序输出符合条件的单词列表\n */\npublic List<String> sortGetTop3LongWordsByStream(@NotNull String sentence) {\n    return Arrays.stream(sentence.split(\" \"))\n            .filter(word -> word.length() > 5)\n            .sorted((o1, o2) -> o2.length() - o1.length())\n            .limit(3)\n            .collect(Collectors.toList());\n}\n```\n\n直观感受上，`Stream`的实现方式代码更加简洁、一气呵成。很多的同学在代码中也经常使用Stream流，但是对Stream流的认知往往也是仅限于会一些简单的`filter`、`map`、`collect`等操作，但JAVA的Stream可以适用的场景与能力远不止这些。\n\n---\n\n那么问题来了：**Stream相较于传统的foreach的方式处理stream，到底有啥优势**？\n\n这里我们可以先搁置这个问题，先整体全面的了解下Stream，然后再来讨论下这个问题。\n\n笔者结合在团队中多年的代码检视遇到的情况，结合平时项目编码实践经验，对**Stream的核心要点与易混淆用法**、**典型使用场景**等进行了详细的梳理总结，希望可以帮助大家对Stream有个更全面的认知，也可以更加高效的应用到项目开发中去。\n\n## Stream初相识\n\n概括讲，可以将Stream流操作分为**3种类型**：\n\n- 创建Stream\n- Stream中间处理\n- 终止Steam\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011703.png)\n\n每个Stream管道操作类型都包含若干API方法，先列举下各个API方法的功能介绍。\n\n- **开始管道**\n\n主要负责新建一个Stream流，或者基于现有的数组、List、Set、Map等集合类型对象创建出新的Stream流。\n\n| API              | 功能说明                                         |\n| ---------------- | ------------------------------------------------ |\n| stream()         | 创建出一个新的stream串行流对象                   |\n| parallelStream() | 创建出一个可并行执行的stream流对象               |\n| Stream.of()      | 通过给定的一系列元素创建一个新的Stream串行流对象 |\n\n---\n\n- **中间管道**\n\n负责对Stream进行处理操作，并返回一个新的Stream对象，中间管道操作可以进行**叠加**。\n\n| API        | 功能说明                                                     |\n| ---------- | ------------------------------------------------------------ |\n| filter()   | 按照条件过滤符合要求的元素， 返回新的stream流                |\n| map()      | 将已有元素转换为另一个对象类型，一对一逻辑，返回新的stream流 |\n| flatMap()  | 将已有元素转换为另一个对象类型，一对多逻辑，即原来一个元素对象可能会转换为1个或者多个新类型的元素，返回新的stream流 |\n| limit()    | 仅保留集合前面指定个数的元素，返回新的stream流               |\n| skip()     | 跳过集合前面指定个数的元素，返回新的stream流                 |\n| concat()   | 将两个流的数据合并起来为1个新的流，返回新的stream流          |\n| distinct() | 对Stream中所有元素进行去重，返回新的stream流                 |\n| sorted()   | 对stream中所有的元素按照指定规则进行排序，返回新的stream流   |\n| peek()     | 对stream流中的每个元素进行逐个遍历处理，返回处理后的stream流 |\n\n---\n\n- **终止管道**\n\n顾名思义，通过终止管道操作之后，Stream流将**会结束**，最后可能会执行某些逻辑处理，或者是按照要求返回某些执行后的结果数据。\n\n| API         | 功能说明                                                     |\n| ----------- | ------------------------------------------------------------ |\n| count()     | 返回stream处理后最终的元素个数                               |\n| max()       | 返回stream处理后的元素最大值                                 |\n| min()       | 返回stream处理后的元素最小值                                 |\n| findFirst() | 找到第一个符合条件的元素时则终止流处理                       |\n| findAny()   | 找到任何一个符合条件的元素时则退出流处理，这个**对于串行流时与findFirst相同，对于并行流时比较高效**，任何分片中找到都会终止后续计算逻辑 |\n| anyMatch()  | 返回一个boolean值，类似于isContains(),用于判断是否有符合条件的元素 |\n| allMatch()  | 返回一个boolean值，用于判断是否所有元素都符合条件            |\n| noneMatch() | 返回一个boolean值， 用于判断是否所有元素都不符合条件         |\n| collect()   | 将流转换为指定的类型，通过Collectors进行指定                 |\n| toArray()   | 将流转换为数组                                               |\n| iterator()  | 将流转换为Iterator对象                                       |\n| foreach()   | 无返回值，对元素进行逐个遍历，然后执行给定的处理逻辑         |\n\n## Stream方法使用\n\n### map与flatMap\n\n`map`与`flatMap`都是用于转换已有的元素为其它元素，区别点在于：\n\n- map **必须是一对一的**，即每个元素都只能转换为1个新的元素\n- flatMap **可以是一对多的**，即每个元素都可以转换为1个或者多个新的元素\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011747.png)\n\n比如：**有一个字符串ID列表，现在需要将其转为User对象列表**。可以使用map来实现：\n\n```java\n/**\n * 演示map的用途：一对一转换\n */\npublic void stringToIntMap() {\n    List<String> ids = Arrays.asList(\"205\", \"105\", \"308\", \"469\", \"627\", \"193\", \"111\");\n    // 使用流操作\n    List<User> results = ids.stream()\n            .map(id -> {\n                User user = new User();\n                user.setId(id);\n                return user;\n            })\n            .collect(Collectors.toList());\n    System.out.println(results);\n}\n```\n\n执行之后，会发现每一个元素都被转换为对应新的元素，但是前后总元素个数是一致的：\n\n```bash\n[User{id='205'}, \n User{id='105'},\n User{id='308'}, \n User{id='469'}, \n User{id='627'}, \n User{id='193'}, \n User{id='111'}]\n```\n\n---\n\n再比如：**现有一个句子列表，需要将句子中每个单词都提取出来得到一个所有单词列表**。这种情况用map就搞不定了，需要`flatMap`上场了：\n\n```java\npublic void stringToIntFlatmap() {\n    List<String> sentences = Arrays.asList(\"hello world\",\"Jia Gou Wu Dao\");\n    // 使用流操作\n    List<String> results = sentences.stream()\n            .flatMap(sentence -> Arrays.stream(sentence.split(\" \")))\n            .collect(Collectors.toList());\n    System.out.println(results);\n}\n```\n\n执行结果如下，可以看到结果列表中元素个数是比原始列表元素个数要多的：\n\n```csharp\n[hello, world, Jia, Gou, Wu, Dao]\n```\n\n这里需要补充一句，`flatMap`操作的时候其实是先每个元素处理并返回一个新的Stream，然后将多个Stream展开合并为了一个完整的新的Stream，如下：\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011838.png)\n\n### peek和foreach方法\n\n`peek`和`foreach`，都可以用于对元素进行遍历然后逐个的进行处理。\n\n但根据前面的介绍，**peek属于中间方法**，而**foreach属于终止方法**。这也就意味着peek只能作为管道中途的一个处理步骤，而没法直接执行得到结果，其后面必须还要有其它终止操作的时候才会被执行；而foreach作为无返回值的终止方法，则可以直接执行相关操作。\n\n```java\npublic void testPeekAndforeach() {\n    List<String> sentences = Arrays.asList(\"hello world\",\"Jia Gou Wu Dao\");\n    // 演示点1： 仅peek操作，最终不会执行\n    System.out.println(\"----before peek----\");\n    sentences.stream().peek(sentence -> System.out.println(sentence));\n    System.out.println(\"----after peek----\");\n    // 演示点2： 仅foreach操作，最终会执行\n    System.out.println(\"----before foreach----\");\n    sentences.stream().forEach(sentence -> System.out.println(sentence));\n    System.out.println(\"----after foreach----\");\n    // 演示点3： peek操作后面增加终止操作，peek会执行\n    System.out.println(\"----before peek and count----\");\n    sentences.stream().peek(sentence -> System.out.println(sentence)).count();\n    System.out.println(\"----after peek and count----\");\n}\n```\n\n输出结果可以看出，peek独自调用时并没有被执行、但peek后面加上终止操作之后便可以被执行，而foreach可以直接被执行：\n\n```mipsasm\n----before peek----\n----after peek----\n----before foreach----\nhello world\nJia Gou Wu Dao\n----after foreach----\n----before peek and count----\nhello world\nJia Gou Wu Dao\n----after peek and count----\n```\n\n---\n\n### filter、sorted、distinct、limit\n\n这几个都是常用的Stream的中间操作方法，具体的方法的含义在上面的表格里面有说明。具体使用的时候，**可以根据需要选择一个或者多个进行组合使用，或者同时使用多个相同方法的组合**：\n\n```java\npublic void testGetTargetUsers() {\n    List<String> ids = Arrays.asList(\"205\",\"10\",\"308\",\"49\",\"627\",\"193\",\"111\", \"193\");\n    // 使用流操作\n    List<Dept> results = ids.stream()\n            .filter(s -> s.length() > 2)\n            .distinct()\n            .map(Integer::valueOf)\n            .sorted(Comparator.comparingInt(o -> o))\n            .limit(3)\n            .map(id -> new Dept(id))\n            .collect(Collectors.toList());\n    System.out.println(results);\n}\n```\n\n上面的代码片段的处理逻辑很清晰：\n\n1. 使用filter过滤掉不符合条件的数据\n2. 通过distinct对存量元素进行去重操作\n3. 通过map操作将字符串转成整数类型\n4. 借助sorted指定按照数字大小正序排列\n5. 使用limit截取排在前3位的元素\n6. 又一次使用map将id转为Dept对象类型\n7. 使用collect终止操作将最终处理后的数据收集到list中\n\n输出结果：\n\n```bash\n[Dept{id=111},  Dept{id=193},  Dept{id=205}]\n```\n\n---\n\n### 简单结果终止方法\n\n按照前面介绍的，终止方法里面像`count`、`max`、`min`、`findAny`、`findFirst`、`anyMatch`、`allMatch`、`nonneMatch`等方法，均属于这里说的简单结果终止方法。所谓简单，指的是其结果形式是数字、布尔值或者Optional对象值等。\n\n```java\npublic void testSimpleStopOptions() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    // 统计stream操作后剩余的元素个数\n    System.out.println(ids.stream().filter(s -> s.length() > 2).count());\n    // 判断是否有元素值等于205\n    System.out.println(ids.stream().filter(s -> s.length() > 2).anyMatch(\"205\"::equals));\n    // findFirst操作\n    ids.stream().filter(s -> s.length() > 2)\n            .findFirst()\n            .ifPresent(s -> System.out.println(\"findFirst:\" + s));\n}\n```\n\n执行后结果为：\n\n```vbnet\n6\ntrue\nfindFirst:205\n```\n\n---\n\n**避坑提醒**\n\n这里需要补充提醒下，**一旦一个Stream被执行了终止操作之后，后续便不可以再读这个流执行其他的操作**了，否则会报错，看下面示例：\n\n```java\npublic void testHandleStreamAfterClosed() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    Stream<String> stream = ids.stream().filter(s -> s.length() > 2);\n    // 统计stream操作后剩余的元素个数\n    System.out.println(stream.count());\n    System.out.println(\"-----下面会报错-----\");\n    // 判断是否有元素值等于205\n    try {\n        System.out.println(stream.anyMatch(\"205\"::equals));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"-----上面会报错-----\");\n}\n```\n\n执行的时候，结果如下：\n\n```mipsasm\n6\n-----下面会报错-----\njava.lang.IllegalStateException: stream has already been operated upon or closed\n at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:229)\n at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449)\n at com.veezean.skills.stream.StreamService.testHandleStreamAfterClosed(StreamService.java:153)\n at com.veezean.skills.stream.StreamService.main(StreamService.java:176)\n-----上面会报错-----\n```\n\n因为stream已经被执行`count()`终止方法了，所以对stream再执行`anyMatch`方法的时候，就会报错`stream has already been operated upon or closed`，这一点在使用的时候需要特别注意。\n\n---\n\n### 结果收集终止方法\n\n因为Stream主要用于对集合数据的处理场景，所以除了上面几种获取简单结果的终止方法之外，更多的场景是获取一个集合类的结果对象，比如List、Set或者HashMap等。\n\n这里就需要`collect`方法出场了，它可以支持生成如下类型的结果数据：\n\n- 一个`集合类`，比如List、Set或者HashMap等\n- StringBuilder对象，支持将多个`字符串进行拼接`处理并输出拼接后结果\n- 一个可以记录个数或者计算总和的对象（`数据批量运算统计`）\n\n---\n\n#### 生成集合\n\n应该算是collect最常被使用到的一个场景了：\n\n```java\npublic void testCollectStopOptions() {\n    List<Dept> ids = Arrays.asList(new Dept(17), new Dept(22), new Dept(23));\n    // collect成list\n    List<Dept> collectList = ids.stream().filter(dept -> dept.getId() > 20)\n            .collect(Collectors.toList());\n    System.out.println(\"collectList:\" + collectList);\n    // collect成Set\n    Set<Dept> collectSet = ids.stream().filter(dept -> dept.getId() > 20)\n            .collect(Collectors.toSet());\n    System.out.println(\"collectSet:\" + collectSet);\n    // collect成HashMap，key为id，value为Dept对象\n    Map<Integer, Dept> collectMap = ids.stream().filter(dept -> dept.getId() > 20)\n            .collect(Collectors.toMap(Dept::getId, dept -> dept));\n    System.out.println(\"collectMap:\" + collectMap);\n}\n```\n\n结果如下：\n\n```bash\ncollectList:[Dept{id=22}, Dept{id=23}]\ncollectSet:[Dept{id=23}, Dept{id=22}]\ncollectMap:{22=Dept{id=22}, 23=Dept{id=23}}\n```\n\n---\n\n#### 生成拼接字符串\n\n**将一个List或者数组中的值拼接到一个字符串里并以逗号分隔开**，这个场景相信大家都不陌生吧？\n\n如果通过`for`循环和`StringBuilder`去循环拼接，还得考虑下最后一个逗号如何处理的问题，很繁琐:\n\n```java\npublic void testForJoinStrings() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    StringBuilder builder = new StringBuilder();\n    for (String id : ids) {\n        builder.append(id).append(',');\n    }\n    // 去掉末尾多拼接的逗号\n    builder.deleteCharAt(builder.length() - 1);\n    System.out.println(\"拼接后：\" + builder.toString());\n}\n```\n\n但是现在有了Stream，使用`collect`可以轻而易举的实现：\n\n```java\npublic void testCollectJoinStrings() {\n    List<String> ids = Arrays.asList(\"205\", \"10\", \"308\", \"49\", \"627\", \"193\", \"111\", \"193\");\n    String joinResult = ids.stream().collect(Collectors.joining(\",\"));\n    System.out.println(\"拼接后：\" + joinResult);\n}\n```\n\n两种方式都可以得到完全相同的结果，但Stream的方式更优雅：\n\n```undefined\n拼接后：205,10,308,49,627,193,111,193\n```\n\n---\n\n#### 数据批量数学运算\n\n还有一种场景，实际使用的时候可能会比较少，就是使用collect生成数字数据的总和信息，也可以了解下实现方式：\n\n```java\npublic void testNumberCalculate() {\n    List<Integer> ids = Arrays.asList(10, 20, 30, 40, 50);\n    // 计算平均值\n    Double average = ids.stream().collect(Collectors.averagingInt(value -> value));\n    System.out.println(\"平均值：\" + average);\n    // 数据统计信息\n    IntSummaryStatistics summary = ids.stream().collect(Collectors.summarizingInt(value -> value));\n    System.out.println(\"数据统计信息： \" + summary);\n}\n```\n\n上面的例子中，使用collect方法来对list中元素值进行数学运算，结果如下：\n\n```python\n平均值：30.0\n总和： IntSummaryStatistics{count=5, sum=150, min=10, average=30.000000, max=50}\n```\n\n---\n\n## 并行Stream\n\n### 机制说明\n\n使用并行流，可以有效利用计算机的多CPU硬件，提升逻辑的执行速度。并行流通过将一整个stream划分为`多个片段`，然后对各个分片流并行执行处理逻辑，最后将各个分片流的执行结果汇总为一个整体流。\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/Java%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E7%9A%84%E4%BC%98%E9%9B%85/clipboard_20240419_011902.png)\n\n### 约束与限制\n\n并行流类似于多线程在并行处理，所以与多线程场景相关的一些问题同样会存在，比如死锁等问题，所以在并行流终止执行的函数逻辑，必须要保证**线程安全**。\n\n---\n\n## 回答最初的问题\n\n到这里，关于JAVA Stream的相关概念与用法介绍，基本就讲完了。我们再把焦点切回本文刚开始时提及的一个问题：\n\n**Stream相较于传统的foreach的方式处理stream，到底有啥优势**？\n\n根据前面的介绍，我们应该可以得出如下几点答案：\n\n- **代码更简洁**、偏声明式的编码风格，更容易体现出代码的逻辑意图\n- **逻辑间解耦**，一个stream中间处理逻辑，无需关注上游与下游的内容，只需要按约定实现自身逻辑即可\n- 并行流场景**效率**会比迭代器逐个循环更高\n- 函数式接口，**延迟执行**的特性，中间管道操作不管有多少步骤都不会立即执行，只有遇到终止操作的时候才会开始执行，可以避免一些中间不必要的操作消耗\n\n当然了，Stream也不全是优点，在有些方面也有其弊端：\n\n- 代码调测debug不便\n- 程序员从历史写法切换到Stream时，需要一定的适应时间\n\n---\n","tags":["Java","流操作","基础语法"],"categories":["开发"]},{"title":"Jetbrains系列快捷键-Win版","url":"/2024/04/07/Jetbrain系列快捷键-Win版/","content":"## 说明\n\n此快捷键说明我是翻译官方的快捷键说明的，方便查看，基于PHPStorm的官方Help来翻译的，其他系列的JetBrains软件应该都是一样的道理，其中如有错误，欢迎斧正。\n\n## 编辑\n\n------\n\n| 快捷键组合            | 说明                                                         |\n| --------------------- | ------------------------------------------------------------ |\n| Ctrl + Space          | 代码自动完成提示（选择）                                     |\n| Alt + Enter           | 显示意图动作和快速修复                                       |\n| Ctrl + P              | 参数信息（在调用方法参数忘记的时候，提示）                   |\n| Ctrl + Q              | 快速查找文件，可以查找当前类定义的文件等                     |\n| Ctrl + 鼠标滑过       | 基本信息                                                     |\n| Alt + Insert          | 生成代码...(细节需要多次操作会发现很有意思)                  |\n| Ctrl + O              | 重写方法（在PHPStorm中是重写父类方法，会有选择框）           |\n| Ctrl + I              | 实现方法（一般是指实现接口类或抽象类方法）                   |\n| Ctrl + Alt + T        | 环绕代码块 (if..else, try..catch, for, 等)                   |\n| Ctrl + /              | 单行注释(//)                                                 |\n| Ctrl + Shift + /      | 块注释 (/**/)                                                |\n| Ctrl + W              | 选择依次递增的代码块，具体使用目前来看比较少                 |\n| Ctrl + Shift + W      | 去掉当前选择返回上一个选择，类似于撤销选择，与上面的相反     |\n| Ctrl + Alt + L        | 格式化代码，一般来说，写的代码格式不整齐统一，这个很有用     |\n| Ctrl + Alt + I        | 自啮合线，这个解释不太好解释，测试结果就是会自动根据代码来进行对齐 |\n| Ctrl + D              | 复制当前行或选定的块                                         |\n| Ctrl + Y              | 删除插入符号所在行                                           |\n| Ctrl + Shift + J      | 智能线连接（HTML和JavaScript才有用）                         |\n| Ctrl + Enter          | 智能分割线 (HTML 和 JavaScript 才有用)                       |\n| Shift + Enter         | 开始新行，比如光标在当前行，不需要切换到行尾按Enter，直接按这个组合键即可 |\n| Ctrl + Shift + U      | 切换选中的英文文字的大小写，此处其实用到挺多的               |\n| Ctrl + Shift + ] 或 [ | 选择直到代码块的开始或结束，我之前不知道这个，其实很有用     |\n| Ctrl + Delete         | 删除从当前光标到当前单词结尾                                 |\n| Ctrl + Backspace      | 从光标位置删除到当前单词的开始                               |\n| Ctrl + + 或 -         | 这里是ctrl和加号或者减号产生的组合，可以折叠或展开当前代码块 |\n| Ctrl + F4             | 关闭活动中的tab                                              |\n| Ctrl + Shift + V      | 从历史粘贴                                                   |\n\n## 调试\n\n------\n\n*此处我是用得很少*\n\n| 快捷键组合    | 说明       |\n| ------------- | ---------- |\n| F8            | 跳过       |\n| F7            | 步进       |\n| Shift + F8    | 跳出       |\n| Alt + F8      | 表达式求值 |\n| F9            | 恢复程序   |\n| Ctrl + F8     | 切断断点   |\n| Ctrl+Shift+F8 | 查看断点   |\n\n## 运行\n\n------\n\n| 快捷键组合         | 说明                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| Shift + F10        | 运行                                                         |\n| Shift + F9         | 调试                                                         |\n| Ctrl + Shift + F10 | 从编辑器运行上下文配置（Run context configuration from editor），此处可能翻译不够准确 |\n| Ctrl + Shift + X   | 在命令行运行                                                 |\n\n## 搜索/替换\n\n| 快捷键组合         | 说明              |\n| ------------------ | ----------------- |\n| Ctrl + F/R         | 查找/替换         |\n| F3/Shift + F3      | 查找下一个/上一个 |\n| Ctrl + Shift + F/R | 在目录中查找/替换 |\n\n## 查找哪些地方使用\n\n| 快捷键组合           | 说明                                        |\n| -------------------- | ------------------------------------------- |\n| Alt + F7 / Ctrl + F7 | 当前文件查找被使用/在文件中查找哪些地方使用 |\n| Ctrl + Shift + F7    | 文件中搜索并在使用的地方高亮显示            |\n| Ctrl + Alt + F7      | 显示哪些地方被使用                          |\n\n## 导航\n\n------\n\n| 快捷键组合               | 说明                                                         |\n| ------------------------ | ------------------------------------------------------------ |\n| Ctrl + N                 | 跳转到指定类                                                 |\n| Ctrl + Shift + N         | 跳转到文件                                                   |\n| Ctrl + Alt + Shift + N   | 跳转到符号                                                   |\n| Ctrl + G                 | 跳转到第几行                                                 |\n| Alt + Right/Left         | 切换编辑器活动窗                                             |\n| Esc                      | Go to editor (from tool window)                              |\n| Ctrl + E                 | 弹出最近编辑文件，我也是在写这文档才知道，太方便了           |\n| Ctrl + Alt + Left/Right  | 导航前进/后退                                                |\n| Ctrl + Shift + Backspace | 跳转到最近编辑的代码位置                                     |\n| Alt + F1                 | 在任何视图中选择当前文件或符号                               |\n| Ctrl + B 或 Ctrl + Click | 跳到申明（如跳转到当前函数声明的地方，这个很常用，可以实操一下） |\n| Ctrl + Alt + B           | 与上面相反，跳到执行位置                                     |\n| Ctrl + Shift + I         | 打开快速定义查找                                             |\n| Ctrl + Shift + B         | 跳转到类型声明                                               |\n| Ctrl + U                 | 跳到超级方法(super-method)/超类 (super-class)                |\n| Alt + Up/Down            | 跳转到上一个或者下一个方法，在编辑一个类的时候，方便一个一个的方法进行查看 |\n| Ctrl + ] / [             | 跳转到代码块的开始或结束                                     |\n| F2 / Shift + F2          | 跳转到上一个或下一个高亮错误地方，这个检查代码语法错误很有用 |\n| F4 / Ctrl + Enter        | 编辑源代码/查看源代码                                        |\n\n## 重构\n\n------\n\n| 快捷键组合             | 说明                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| F5/F6                  | 复制/移动                                                    |\n| Alt + Delete           | 安全删除                                                     |\n| Shift + F6             | 重命名                                                       |\n| Ctrl + Alt + N         | 内联变量                                                     |\n| Ctrl + Alt + M/V/F/C   | 提取方法/变量/字段/常数(Method/Variable/Field/Constant)      |\n| Ctrl + Alt + Shift + T | 重构这段代码（显示所有可用的重构），比如if else if 这种语句转switch语句 |\n\n## VCS/本地历史\n\n------\n\n| 快捷键组合       | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| Alt + 反引号 (`) | ‘VCS’ 快速弹出，此处需要注意这个反引号在最左上角，和那个~符号在一起的，ESC键下面 |\n| Ctrl + K         | 提交项目到VCS                                                |\n| Ctrl + T         | 从 VCS 更新项目                                              |\n| Alt + Shift + C  | 显示最近更改                                                 |\n\n## 常用操作\n\n------\n\n| 快捷键组合         | 说明                                                       |\n| ------------------ | ---------------------------------------------------------- |\n| 快速按两次 Shift   | 搜索任何一个地方                                           |\n| Ctrl + Shift + A   | 查找方法(Action)                                           |\n| Alt + #[0-9]       | 打开相应的工具窗口（这个我也没搞明白）                     |\n| Ctrl + Alt + F11   | 开启或关闭全屏模式                                         |\n| Ctrl + Shift + F12 | 开启或关闭最大化编辑                                       |\n| Alt + Shift + F    | 添加到收藏列表（我觉得这个功能很神奇，不知道为啥要这么做） |\n| Alt + Shift + I    | 检查当前文件以及当前配置文件                               |\n| Ctrl + Alt + S     | 打开设置对话框（表示会与QQ默认快捷键冲突）                 |\n| Ctrl + Tab         | 在 tabs 和工具窗口间切换                                   |\n\n## 插入模板/片段(针对PHPstorm)\n\n------\n\n| 快捷键组合 | 说明                                         |\n| ---------- | -------------------------------------------- |\n| Alt + J    | 插入模板                                     |\n| eco        | ‘echo’ 语句                                  |\n| fore       | foreach(iterable_expr as $value) {…}         |\n| forek      | foreach(iterable_expr as $key => $value) {…} |\n| inc/inco   | ‘include’/‘include_once’ 语句                |\n| prif       | private function                             |\n| prof       | protected function                           |\n| pubf       | public function                              |\n| rqr/rqro   | ‘require’/‘require_once’ 语句                |\n| 更多...    | 其他自己尝试                                 |","tags":["转载","Jetbrains","便捷操作","开发技巧","快速录入"],"categories":["开发"]},{"title":"MarkDown的基本语法使用","url":"/2024/04/02/MarkDown的基本语法使用/","content":"\n# Markdown 语法简介\n\nMarkdown 语法是轻量级文本标记语言, Markdown简单易学，功能强大，且 Markdown 格式也可以转换成 html, pdf 等。\n\n接下来我就来介绍些 Markdown 的一些常用功能:\n\n### 标题\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n### **强调样式**\n\n```markdown\n*斜体*  或者 _斜体_\n**加粗**\n***斜体并加粗***\n~~划掉某些不需要的文字~~\n`标红强调`\n```\n\n![强调样式图片](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F1.png)\n\n### 排列\n\n**1.有序排列**\n\n```markdown\n1. 有序排列只需在文字前加 一个数字和一个英文句点\n2. 数字不管有序还是无序\n4. 结果都是有序的\n```\n\n1. 有序排列只需在文字前加 一个数字和一个英文句点\n2. 数字不管有序还是无序\n3. 结果都是有序的\n\n**2.无序排列**\n\n有三个符号表示无序排列 * + -\n\n```markdown\n* 无序排列\n+ 无序排列\n- 符号和文字之间要加一个字符的空格\n```\n\n- 无序排列\n- 无序排列\n- 符号和文字之间要加一个字符的空格\n\n### 分割线\n\n在一行用三个以上的 * 或者 - 或者 _ 即可新建一条分隔线。\n\n```markdown\n分割线\n****\n吼吼吼\n```\n\n分割线\n\n_______________\n\n吼吼吼\n\n## 制表\n\n语法说明：\n\n1.第一行为表头,第二行主要是分隔表头以及内容,第三行开始为表格内容\n\n2.第二行中输入 : 可对齐该列的内容。详情见下\n\n```markdown\n|     左对齐      |     居中对齐    | 右对齐          | \n| :------         | :-----:         | -------:        |\n| 今天天气怎么样  | 今天天气怎么样  | 今天天气怎么样  | \n|     有点热      |        有点热   |        有点热   | \n```\n\n| 左对齐         | 居中对齐       | 右对齐         |\n| -------------- | -------------- | -------------- |\n| 今天天气怎么样 | 今天天气怎么样 | 今天天气怎么样 |\n| 有点热         | 有点热         | 有点热         |\n\n### 任务列表\n\n在项目的缺陷、合并请求和描述中可添加任务列表\n\n```markdown\n- [x] 表示已经完成的任务\n- [ ] 表示正在进行的任务\n    - [x] files-test 1\n    - [ ] files-test 2\n    - [ ] files-test 3\n```\n\n![img](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F2.png)\n\n**区块引用**\n\n```markdown\n> Markdown的区块引用类似 email 中`> ` 的引用方式。\n> > 嵌套的引用也是支持的哦。\n>\n> 要注意的是`>`后面是有一个空格的。\n```\n\n### 代码框\n\n~~~markdown\n```javascript\nvar s = \"Hello world\";\nalert(s);\n```\n~~~\n\n![js代码图片](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F3.png)\n\n### 公式\n\n```markdown\n行内公式$`a^2+b^2=c^2`$\n```\n\n行内公式a^2+b^2=c^2*a*2+*b*2=*c*2\n\n~~~markdown\n这种公式会渲染成单独的一行\n```math\n\\textrm{Accuracy} = \\dfrac{N_{match}}{N_{all}}\n```\n~~~\n\n这种公式会渲染成单独的一行\n\n![数学公式图片](https://blog-1301661174.cos.ap-shanghai.myqcloud.com/photo/post_img/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%88%AA%E5%B1%8F4.png)\n\n### HTML支持\n\n一些Markdown不支持的功能，可通过HTML实现\n\n```markdown\n<!-- 内容居中展示 -->\n<center>\n<img src=\"https://gnaixeuy.cn\" />\n<p>Hello GnaixEuy<p></center>\n</center>\n```\n\n### 插入图片\n\n```markdown\n内联式:\n![a](https://gnaixeuy.cn/image1.jpg)\n\n引用试:\n![a][logo]\n\n[logo]: https://gnaixeuy.cn/image1.jpg\n```\n\n## 插入链接\n\n链接的语法与图片的语法非常相似，只是差了一个 !\n\n链接的语法为 `[]()`\n\n```markdown\n[首页](http://www.gnaixeuy.cn)\n\n或者不输入内容然后使用[链接]\n[百度链接]: http://www.baidu.com\n```\n\n[首页](http://www.gnaixeuy.cn)\n[百度链接]: http://www.baidu.com","tags":["快速录入","markdown","基本语法"],"categories":["开发"]},{"title":"如何做出伟大工作","url":"/2024/02/22/如何做出伟大工作/","content":"\n# 如何做出伟大的工作\n\n最近「黑客与画家」的作者出了一篇新的文章《How To Do Great Work / 如何做出伟大的工作》，写得特别好，用GPT4给翻译了一下，帮大伙省下Token。\n\n> 阅读原文 [paulgraham.com](http://www.paulgraham.com/greatwork.html)\n\n如果你收集了很多不同领域内做出卓越工作的技巧列表，那么它们的交集会是什么样子呢？我决定通过实践来寻找答案。\n\n我的部分目标是创建一份能被任何领域的工作者使用的指南。但我也对这些技巧交集的形状感到好奇。这个尝试展示出，它确实有一个明确的形状，而不仅仅是一个贴着“努力工作”标签的点。\n\n以下的秘诀假定你有非常高的抱负。\n\n首先，你要决定从事什么工作。你选择的工作需要具备三个品质：你有天生的适应能力，你对它有深厚的兴趣，同时它还要能提供展现你伟大工作的空间。\n\n实际上，你不必过于担心第三个条件。雄心壮志的人往往在这方面过于保守。所以你只需找到你有能力且有强烈兴趣的事情即可。\n\n这听起来很直接，但实际上往往很困难。当你年轻的时候，你不知道你擅长什么或者各种工作是什么样的。你最后可能会做的一些工作可能现在还不存在。所以，虽然有些人在14岁的时候就知道他们想做什么，但大多数人还是需要自己去摸索。\n\n找出要从事什么工作的方法是通过实际操作。如果你不确定应该做什么，就猜。但是必须选择一件事情并开始行动。你可能有时会猜错，但没关系。了解多样性的事物是有益的，很多重大的发现都源于注意到不同领域之间的联系。\n\n养成自我研究项目的习惯。不要让“工作”只是别人告诉你要做的事。如果你真的能做出伟大的工作，可能会在你自己的项目中。这可能会在某个更大的项目内，但你将是驱动你那部分的人。\n\n你的项目应该是什么？对你来说，什么都可能是令人兴奋的挑战。随着你年纪的增长和项目口味的演变，刺激和重要会汇聚在一起。在7岁的时候，建造乐高大作可能会让你觉得挑战重重，然后在14岁的时候，自学微积分可能会让你觉得挑战重重，到21岁的时候，你可能开始探索物理学中未解的问题。但是，始终保持那份激情。\n\n有一种兴奋的好奇心是伟大工作的引擎和舵。它不仅能驱使你前进，而且如果你让它自由发挥，它还会告诉你应该做什么。\n\n你对什么过于好奇——到让大多数其他人都觉得无聊的程度？这就是你要找的。\n\n一旦你找到了你非常感兴趣的东西，下一步就是学习足够多的知识，让你能够达到知识的前沿。知识是以分形的方式扩展的，从远处看，边缘看起来很平滑，但是一旦你学得足够多以接近它们，你会发现它们其实充满了缺口。\n\n下一步就是去发现这些缺口。这需要一些技巧，因为你的大脑希望忽视这些缺口，以便构建一个更简单的世界模型。许多发现都来自于对大家都视为理所当然的事情提出疑问。\n\n如果答案看起来很奇怪，那就更好了。伟大的工作往往带有一点奇特的气质。你从绘画到数学都能看到这一点。试图刻意制造它可能会显得做作，但如果它自然出现，就拥抱它。\n\n大胆地追求异常的想法，即使其他人对它们不感兴趣——实际上，尤其是在他们不感兴趣的情况下。如果你对所有人都忽视的某种可能性感到兴奋，而你又有足够的专业知识来精确指出他们都忽视了什么，那么这就是你能找到的最好的选择。\n\n四个步骤：选择领域，学习足够的知识以到达前沿，发现缺口，探索有前景的缺口。这就是几乎所有做出伟大工作的人都是如何做到的，从画家到物理学家。\n\n第二步和第四步需要付出艰辛的努力。也许不能证明你必须努力工作才能做出伟大的事情，但实证证据是与证明人会死一样有力。这就是为什么你需要投身于你深感兴趣的事情。兴趣能驱使你比单纯的勤奋工作更努力。\n\n最强大的三种动力是好奇心、喜悦和希望做出令人印象深刻的事情。有时它们会交汇，那种组合是最有力的。\n\n真正的大奖就是发现一个新的分形芽。你发现知识表面上的一条裂缝，将其撬开，里面竟是一个完整的世界。\n\n让我们再多谈一点关于如何找出要从事什么工作这个复杂问题。主要难点在于，除非亲自去做，否则你无法了解大部分工作是什么样的。这意味着四个步骤是交叠的：你可能需要在某项工作上花费几年的时间，才能知道你对它有多喜欢或者你在这方面有多能干。而与此同时，你并未从事，因此也未能了解大部分其他类型的工作。因此，在最坏的情况下，你可能会在获取的信息非常不完整的情况下做出迟来的选择。[4]\n\n野心的本质使得这个问题更加棘手。野心有两种形式，一种是对主题感兴趣之前的野心，一种是从对主题的兴趣中生长出来的野心。做出伟大工作的大多数人都有这两种野心的混合体，你对前者的拥有越多，决定要做什么就越困难。\n\n大多数国家的教育系统假装这很容易。他们希望你在知道这个领域真正是什么样子之前就致力于它。结果就是，一个处在最佳轨迹上的有抱负的人在系统中往往会被认为是有问题的。\n\n如果他们至少承认这一点——如果他们承认这个系统不仅不能帮助你找出要从事什么工作，而且还是建立在你将以某种神奇的方式作为青少年来猜测的假设上——那就好了。他们没有告诉你，但我会告诉你：当你试图弄清楚该做什么时，你就是自己的主人。有些人运气好，猜对了，但其他人可能会发现自己在一个基于每个人都会这样做的假设而铺设的轨道上横冲直撞。\n\n如果你年轻有抱负，但不知道该做什么，你应该做什么？你绝不能漫无目标地漂流，假设问题会自行解决。你需要采取行动。但是没有系统的程序可以遵循。当你阅读做过伟大工作的人的传记时，你会发现运气在其中起了多大的作用。他们通过偶然的会面，或者阅读他们碰巧选到的书，发现了应该做什么。所以，你需要使自己成为运气的大目标，而做到这一点的方法是保持好奇心。尝试许多事情，遇见许多人，阅读许多书，提出许多问题。[5]\n\n在疑惑之际，优化有趣性。随着你对它们了解得越来越多，领域会发生变化。例如，数学家所做的事情与你在高中数学课上所做的事情非常不同。所以你需要给不同类型的工作一个机会，让他们向你展示他们是什么样的。但是，当你对一个领域了解得越多，它应该变得越来越有趣。如果没有，那么它可能就不适合你。\n\n如果你发现自己对其他人不感兴趣的事情感兴趣，不要担心。你的有趣口味越奇怪，就越好。奇怪的口味通常是强烈的口味，对工作的强烈口味意味着你会有生产力。而且，如果你在鲜有人走过的地方寻找，你更有可能找到新事物。\n\n你适合某种工作的一个标志是，你喜欢其他人觉得枯燥或者恐怖的部分。\n\n但是，领域不是人；你不欠它们任何忠诚。如果在做某件事的过程中，你发现了另一件更让人兴奋的事情，不要害怕转换。\n\n如果你正在为人们制作一些东西，一定要确保那是他们真正想要的东西。做到这一点的最好办法就是制作你自己想要的东西。写你想读的故事；制作你想用的工具。由于你的朋友可能有相似的兴趣，这也会为你赢得你的初始观众。\n\n这应该遵循让人兴奋的规则。显然，最让人兴奋的故事将是你想读的故事。我特别提到这个例子是因为有太多的人弄错了。他们没有制作他们想要的，而是尝试制作一些他们想象中的，更成熟的观众想要的东西。一旦你走上那条路，你就迷失了。[6]\n\n在你试图找出要做什么时，有许多力量会让你走错路。矫饰、时尚、恐惧、金钱、政治、别人的愿望、声名狼藉的骗子。但是，如果你坚持你真正感兴趣的事情，你就能抵挡住所有这些。如果你感兴趣，你就不会迷路。\n\n追求你的兴趣可能听起来像是一种相当被动的策略，但在实践中，它通常意味着你需要冒着各种困难去追求它。你通常需要冒着被拒绝和失败的风险。所以，这确实需要相当大的勇气。\n\n但是，虽然你需要勇气，但通常不需要太多的规划。在大多数情况下，做出伟大的工作的秘诀简单来说就是：努力工作，从事令人兴奋的雄心勃勃的项目，这样就会有好的结果。你无需制定一个计划然后去执行它，你只需要尽力保持某些不变的东西。\n\n规划的问题在于，它只适用于你可以提前描述的成就。你可以在儿童时期决定要赢得金牌或者变富有，然后坚持不懈地追求这个目标，但你不能以这种方式发现自然选择。\n\n我认为对于大多数想要做出伟大工作的人来说，正确的策略不是过多地规划。在每个阶段，做最有趣的事情，并为未来保留最好的选项。\n\n我称这种方法为“顺风而行”。这似乎是大多数做出优秀工作的人所采用的方式。\n\n即使你找到了令人兴奋的工作，进行工作并不总是直截了当的。有些时候，新的想法会让你早晨从床上跳起来，直接开始工作。但也有很多时候，事情并非如此。\n\n你并不是简单地扬起帆，让灵感吹动你前进。存在逆风、潮流和隐秘的浅滩。所以，工作就像航海一样，有其技巧。\n\n例如，你必须努力工作，但是也有可能工作过度，如果这样的话，你会发现收获递减：疲劳会让你变得愚蠢，最终甚至会损害你的健康。工作的回报递减的点取决于工作的类型。最难的类型你可能每天只能做四五个小时。\n\n理想情况下，这些小时应该是连续的。只要你能做到，尽量安排你的生活，使你有大块的时间用来工作。如果你知道可能会被打断，你就会避开艰难的任务。\n\n可能开始工作比继续工作更难。你经常需要欺骗自己才能跨越那个初始阈值。不用担心这个；这是工作的性质，不是你性格的缺陷。工作有一种启动能量，既有每天的，也有每个项目的。而且，因为这个阈值是虚假的，它比继续下去所需的能量要高，所以你完全可以告诉自己一个相应的谎言来跨越它。\n\n如果你想做出伟大的工作，通常向自己撒谎是错误的，但这是极少数例外的情况。当我早上不愿意开始工作时，我经常通过对自己说“我只是看看到目前为止我做了些什么”来欺骗自己。五分钟后我发现了一些错误或不完整的地方，我就开始工作了。\n\n类似的技巧也适用于开始新项目。对自己撒谎，说一个项目需要做多少工作，也是可以的。很多伟大的事情都始于某人说“这有多难呢？”\n\n这是年轻人具有优势的一种情况。他们更乐观，尽管他们乐观的一个来源是无知，但在这种情况下，无知有时候可以打败知识。\n\n尽管如此，你要尽量完成你开始的工作，即使它比你预期的要花更多的工作。完成事情不仅仅是一种整洁或自律的锻炼。在许多项目中，最好的工作常常发生在本应是最后阶段的地方。\n\n另一个允许的谎言是，在你的心中夸大你正在做的事情的重要性。如果这有助于你发现新事物，那么它可能原来就不是谎言。\n\n由于工作有两种开始方式 —— 每天和每个项目 —— 所以也有两种形式的拖延。每个项目的拖延远比每天的拖延更危险。你把开始那个雄心勃勃的项目一年又一年地推迟，因为时间总不是恰到好处。当你以年为单位拖延时，你可能会做不了很多事情。\n\n每个项目的拖延之所以如此危险，是因为它通常会伪装成工作。你并不是只是坐在那里什么也不做；你在另一件事情上工作勤奋。所以，每个项目的拖延不会触发每天的拖延的警告。你太忙了，没时间注意到它。\n\n战胜它的方法是，偶尔停下来问自己：“我在做我最想做的事吗？”当你年轻的时候，答案偶尔是不行也可以，但随着你变老，这越来越危险。\n\n伟大的工作通常需要花费对大多数人来说看似过多的时间来解决问题。你不能把这个时间看作是成本，否则它看起来就太高了。你必须找到足够引人入胜的工作。\n\n可能有些工作需要你在你讨厌的事情上认真工作几年才能进入好的部分，但这不是伟大工作的方式。伟大的工作是通过持续地专注于你真正感兴趣的事情来实现的。当你停下来审视时，你会惊讶于你已经走了多远。\n\n我们感到惊讶的原因是我们低估了工作的累积效应。每天写一页看起来不像多大的事，但如果你每天都做，你一年就能写一本书。关键是：一致性。做伟大事情的人每天不会完成很多事情。他们做了一些事情，而不是什么都没做。\n\n如果你做的工作可以产生复合效应，你就会得到指数增长。大多数这样做的人都是在无意识\n\n中做的，但值得停下来思考。学习，例如，就是这种现象的一个例子：你对某件事学的越多，学习更多的东西就越容易。吸引观众也是一样：你拥有的粉丝越多，他们就会为你带来更多的新粉丝。\n\n指数增长的问题在于，曲线在开始时感觉平坦。它并不平坦；它仍然是美妙的指数曲线。但我们无法直观地理解这一点，所以我们在初期低估了指数增长。\n\n一个能指数增长的事物可以变得如此有价值，以至于值得我们付出非常的努力来启动它。但由于我们在早期低估了指数增长，这也主要是在无意识中完成的：人们在学习新事物的初期付出初始的努力，因为他们从经验中知道学习新事物总是需要初始的推动，或者他们一次吸引一个粉丝，因为他们没有更好的事情做。如果人们意识到他们可以投资于指数增长，会有更多的人去做。\n\n工作并不仅仅在你努力时发生。当你走路、洗澡或躺在床上的时候，你会进行一种无目的的思考，这种思考可能非常有力。让你的思绪稍微游走一下，你经常会解决你无法通过正面攻击解决的问题。\n\n然而，你必须以正常的方式努力工作，才能从这种现象中获益。你不能只是四处游荡做白日梦。白日梦必须与刻意的工作交织在一起，为它提供问题。[10]\n\n每个人都知道在工作中避免干扰，但在循环的另一半中避免干扰也很重要。当你让你的思绪游走时，它会游到你在那一刻最关心的事情上。所以避免那种会把你的工作从首位挤出去的干扰，否则你会把这种有价值的思考方式浪费在干扰上。（例外：不要避免爱情。）\n\n在你所在领域的工作中，有意识地培养你的品味。直到你知道哪个是最好的，以及使它如此的原因，你才知道你在追求什么。\n\n而那就是你要追求的，因为如果你不试图成为最好的，你甚至都不会变得很好。这种观察已经被许多人在许多不同的领域中提出，因此值得思考为什么它是真的。可能是因为野心是一种几乎所有的错误都在一个方向上的现象——几乎所有偏离目标的炮弹都是偏低了。或者是因为对成为最好的野心和对成为好的野心是质的不同。或者可能只是因为好是一个过于模糊的标准。这三个原因可能都是对的。[11]\n\n幸运的是，这里有一种规模经济。尽管试图成为最好的可能看起来你要承担重大的负担，但实际上你经常会最终获得收益。这是激动人心的，也是奇特地令人感到自由。它简化了事情。在某些方面，试图成为最好比只试图变得好更容易。\n\n要有高远的目标，你可以试图创造出人们在一百年后仍然会关心的东西。不是因为他们的观点比你的同时代人更重要，而是因为一百年后仍然看起来好的东西更可能真的很好。\n\n不要试图用独特的风格工作。只要尽力做好你的工作；你将不由自主地以独特的方式去做。\n\n风格是在不试图做到的情况下以独特的方式做事情。试图做到就是矫揉造作。\n\n矫揉造作实际上是假装不是你在做工作。你采用了一个令人印象深刻但假冒的人格，虽然你对其令人印象深刻感到满意，但在工作中显现出来的是假冒的一面。[12]\n\n对于年轻人来说，想成为别人的诱惑最大。他们常常感觉自己是无名小卒。但你永远不需要担心这个问题，因为如果你在足够雄心勃勃的项目上工作，这个问题会自行解决。如果你在一个雄心勃勃的项目上成功，你就不是一个无名小卒；你就是做到了的那个人。所以只要做工作，你的身份就会自我照顾。\n\n“避免矫揉造作”是一个有用的规则，只要它可以走得足够远，但你怎么才能以积极的方式表达这个想法呢？你要怎么说出你要成为什么，而不是不要成为什么呢？最好的答案是诚实。如果你是诚实的，你就可以避免不仅是矫揉造作，还有一整套类似的恶习。\n\n诚实的核心是诚实。我们从小就被教导要诚实，这是一种无私的美德——一种牺牲。但实际上它也是一种力量来源。要看到新的想法，你需要对真相有一个异常敏锐的眼光。你正在尝试看到迄今为止别人还没有看到的更多真相。如果你不诚实，你怎么能对真相有一个敏锐的眼光呢？\n\n避免诚实的一种方法是保持稍微的正压。积极地愿意承认你是错的。一旦你承认你在某件事上错了，你就自由了。在那之前，你必须承受它。[13]\n\n另一个更微妙的诚实成分是非正式。非正式比它在语法上否定的名字意味的要重要得多。\n\n它不仅仅是缺乏某件东西。它意味着把焦点放在重要的事情上，而不是不重要的事情。\n\n正式和矫揉造作有共同之处，那就是在做工作的同时，你也试图看起来某种方式。但任何进入你看起来怎样的能量都会减少你的好。这就是为什么书呆子在做伟大的工作上有优势：他们在看起来像什么上花费的努力很小。实际上，这基本上就是书呆子的定义。\n\n书呆子有一种天真的大胆，这正是你在做伟大工作时所需要的。这不是后天学来的；这是从童年时代保留下来的。所以要坚持下去。成为一个把事情摆出来的人，而不是一个坐在后面提供听起来很复杂的批评的人。”批评很容易”在最字面的意义上是真的，而通向伟大工作的路永远不容易。\n\n可能有一些工作在你是愤世嫉俗和悲观的时候有优势，但如果你想做出伟大的工作，那么乐观是一个优势，即使这意味着你有时会看起来像个傻瓜。有一种古老的传统恰恰相反。旧约圣经说，最好保持沉默，免得你看起来像个傻瓜。但那是为了看起来聪明的建议。如果你真的想发现新的东西，最好冒险告诉人们你的想法。\n\n有些人天生就是诚实的，有些人则需要刻意的努力。任何一种诚实都足够。但我怀疑在没有诚实的情况下能否做出伟大的工作。即使你是诚实的，做起来也很难。你没有足够的错误边际来容纳被影响、诚实、正统、时髦或酷的扭曲。[14]\n\n伟大的作品不仅与创作者一致，也与其自身一致。它通常都是完整的一体。因此，如果你在工作中遇到决定，问问哪个选择更一致。\n\n你可能需要丢掉一些东西，然后重新做。你不一定必须这样做，但你必须愿意这样做。这可能需要一些努力；当有些东西需要你重做时，现状偏见和懒惰会结合在一起，让你对此事保持否认态度。要击败这种情况，问问自己：如果我已经做出了改变，我是否想要恢复到现在的状态？\n\n要有剪切的信心。如果某样东西不合适，不要仅仅因为你为之骄傲，或者它花费了你大量的努力就保留它。\n\n实际上，在某些类型的工作中，把你正在做的事情剥离到本质是好的。结果会更集中；你会更理解它；你也无法对自己撒谎，说那里有真实的东西。\n\n数学优雅可能听起来只是一个来自艺术的隐喻。当我第一次听到“优雅”被用来形容一个证明时，我就是这么想的。但现在我怀疑它在概念上是更早的——艺术优雅的主要成分是数学优雅。无论如何，它在数学之外还是一个有用的标准。\n\n然而，优雅可以是一个长期的赌注。繁琐的解决方案在短期内通常会有更高的声望。它们需要大量的努力，而且难以理解，这两点都会给人留下印象，至少是暂时的。\n\n而一些最好的工作看起来好像并没有花费太多的努力，因为在某种意义上，它们已经存在了。它们不需要被建造，只需要被看见。当你难以判断你是在创造还是在发现某件事时，这是一个非常好的迹象。\n\n当你做的工作可以被看作是创造或发现时，倾向于发现。试着将自己看作是一个单纯的通道，让思想自然地形成。\n\n奇怪的是，选择要做什么问题的问题是一个例外。这通常被视为搜索，但在最好的情况下，它更像是创造某样东西。在最好的情况下，你在探索过程中创造了领域。\n\n同样，如果你试图建造一个强大的工具，使其毫无限制地宽松。强大的工具几乎就是定义上将会被以你意想不到的方式使用，所以倾向于消除限制，即使你不知道这会带来什么好处。\n\n伟大的工作往往具有工具性，即它是其他人建设的基础。所以，如果你正在创造其他人可以使用的思想，或者揭示其他人可以回答的问题，那是一个好的迹象。最好的思想在许多不同的领域都有含义。\n\n如果你以最一般的形式表达你的思想，它们会比你预期的更真实。\n\n当然，仅仅真实是不够的。伟大的想法必须是真实且新颖的。即使你已经学习到足够的知识来到达知识的前沿，看到新的想法也需要一定的能力。\n\n在英语中，我们将这种能力称为原创性、创造性和想象力。给它一个单独的名字似乎是合理的，因为在某种程度上它确实是一个单独的技能。有可能在其他方面有很强的能力——有很多所谓的“技术能力”——但是在这方面可能没有那么多。\n\n我从未喜欢过“创造性过程”这个词。它似乎有些误导。原创性不是一个过程，而是一种思维习惯。原创性思考者在他们关注的任何事情上都会产生新的想法，就像角磨机抛出火花一样。他们禁不住。\n\n如果他们关注的东西是他们不太理解的东西，这些新的想法可能不是好的。我知道的最具原创性的思考者之一在离婚后决定专注于约会。他对约会的了解大致与一般15岁的孩子相同，结果色彩斑斓。但看到原创性与专业知识如此分离，让其本质更加明显。\n\n我不知道是否可以培养原创性，但肯定有方法可以充分利用你所拥有的。例如，当你在做某件事时，你更有可能有原创的想法。原创的想法不是来自于试图有原创的想法。它们来自于试图建立或理解一些稍微困难的东西。\n\n谈论或写关于你感兴趣的事情是产生新想法的好方法。当你试图将想法转化为文字时，缺失的想法会创造一种吸引它出现的真空。事实上，有一种思考只能通过写作来完成。\n\n改变你的环境也有帮助。如果你访问一个新的地方，你通常会发现自己在那里有新的想法。旅程本身往往会将它们搅动出来。但你可能不需要走得很远就能得到这个好处。有时候，只需散散步就足够了。\n\n在话题空间中旅行也有助于此。如果你探索很多不同的主题，你会有更多的新想法，部分原因是因为这为角磨机提供了更大的工作表面，部分原因是因为类比是新想法的一个特别丰富的来源。\n\n但是，不要把你的注意力平均分配在许多主题上，否则你会分散自己的精力。你应该根据更像一个幂律的东西来分配它。对少数几个主题保持专业的好奇心，对更多的主题保持闲散的好奇心。\n\n好奇心和原创性密切相关。好奇心通过给原创性提供新的工作对象来滋养它。但关系比这更紧密。好奇心本身就是一种原创性；它大致上是问题的原创性，就如同原创性是答案的。既然问题在最好的情况下是答案的一个大部分，好奇心在最好的情况下就是一个创造性的力量。\n\n拥有新想法是一种奇怪的游戏，因为它通常包括看到那些就在你鼻子下面的事情。一旦你看到一个新想法，它往往看起来是显而易见的。为什么之前没人想到这个呢？\n\n当一个想法看起来既新颖又显而易见时，它可能是一个好主意。\n\n看到一些显而易见的事情听起来很容易。然而，从经验上看，拥有新的想法是困难的。这种明显矛盾的来源是什么呢？那就是看到新的想法通常需要你改变看世界的方式。我们通过既有助于我们也限制我们的模型来看待世界。当你修复一个破碎的模型时，新的想法就变得显而易见。但是注意到并修复一个破碎的模型是困难的。这就是新的想法既显而易见又难以发现的原因：你做了一些困难的事情之后，它们就容易被看到。\n\n发现破碎模型的一种方法是比其他人更严格。世界的破碎模型在与现实冲突的地方留下了线索的痕迹。大多数人不想看到这些线索。说他们对当前的模型有所依恋简直是轻描淡写；这就是他们的思维方式；所以他们往往会忽视模型破碎留下的线索，无论这在回顾时看起来多么明显。\n\n要找到新的想法，你必须抓住破碎的迹象，而不是转过头去。这就是爱因斯坦做的。他能够看到麦克斯韦方程的狂野含义，并不是因为他在寻找新的想法，而是因为他更为严格。\n\n你需要的另一件事是愿意打破规则。尽管听起来自相矛盾，但如果你想修复你对世界的模型，成为一个习惯于打破规则的人会有所帮助。从旧模型的观点来看，新模型通常至少会打破一些内在的规则，而这旧模型是每个人包括你自己最初都会认同的。\n\n很少有人理解所需的打破规则的程度，因为新的想法在成功之后看起来更保守。一旦你使用他们带来的新的世界模型，他们看起来完全合理。但在当时他们并不是这样的；即使在天文学家中，也花了大约一个世纪的时间才普遍接受地心说，因为它感觉错了。\n\n的确，如果你仔细想想，一个好的新想法对大多数人来说必须看起来是坏的，否则已经有人去探索它了。所以你在寻找的是那些看起来疯狂，但是疯狂得恰到好处的想法。你如何认出这些呢？你不能确定。通常看起来坏的想法就是坏的。但是恰到好处的疯狂的想法往往是令人兴奋的；他们富含含义；而那些仅仅是坏的想法往往让人沮丧。\n\n有两种方式可以舒适地打破规则：喜欢打破它们，或对它们漠不关心。我把这两种情况称为积极独立思考和被动独立思考。\n\n积极独立思考的人是顽皮的。规则不仅不能阻止他们；打破规则给他们提供了额外的能量。对于这种人来说，对一个项目的胆大妄为有时可以提供足够的活化能量让它开始。\n\n打破规则的另一种方式是不在乎它们，或甚至不知道它们存在。这就是为什么新手和局外人经常发现新事物；他们对一个领域假设的无知作为一种临时的被动独立思维的来源。Aspies也似乎对传统观念有一种免疫力。我知道的几个人说这帮助他们有新的想法。\n\n严格性和打破规则听起来像是一种奇怪的组合。在流行文化中，它们是对立的。但在这方面，流行文化有一个破碎的模型。它暗含地假定问题是微不足道的，而在微不足道的事情上，严格性和打破规则是对立的。但在真正重要的问题上，只有打破规则的人才能真正严格。\n\n一个被忽视的想法通常要到半决赛才会输。你在潜意识里看到了它，但然后你的另一部分潜意识将它打倒，因为它会太奇怪，太冒险，太费力，太有争议。这提出了一个令人兴奋的可能性：如果你能关闭这种过滤器，你就能看到更多的新想法。\n\n一种做到这一点的方法是问什么对别人来说是好的想法去探索。然后你的潜意识就不会射击它们来保护你。\n\n你也可以从另一个方向发现被忽视的想法：从掩盖它们的东西开始。每一个珍视但错误的原则都被一片死寂的有价值的想法所包围，这些想法因为与它相矛盾而未被探索。\n\n宗教就是一些珍视但错误的原则的集合。所以任何可以被文字或比喻形式描述为宗教的东西，都会有有价值的未探索的想法在它的阴影下。哥白尼和达尔文都做出了这种类型的发现。\n\n你的领域的人们在什么方面有宗教感，意思是他们对某个可能并不像他们认为的那么不言而喻的原则过于依恋？如果你舍弃它，会变得可能？\n\n人们在解决问题时的创新性远远超过在决定要解决哪些问题时的创新性。即使是最聪明的人在决定要做什么时也可能出奇地保守。那些在其他任何方式上都不梦想成为流行的人，却被吸引到做流行的问题上来。\n\n人们在选择问题时比选择解决方案更保守的一个原因是，问题是更大的赌注。一个问题可能占据你几年的时间，而探索一个解决方案可能只需要几天。但即便如此，我认为大多数人都太保守了。他们不仅在回应风险，也在回应流行。不流行的问题被低估了。\n\n最有趣的不流行问题之一就是人们认为已经被充分探索过，但实际上并没有的问题。伟大的工作经常是拿已经存在的东西，展示其潜在的潜力。杜勒和瓦特都做到了这一点。所以如果你对别人认为已经耗尽的领域感兴趣，不要让他们的怀疑阻止你。人们经常在这一点上错。\n\n从事一个不流行的问题可以是非常愉快的。没有炒作或匆忙。机会主义者和批评者都在别处忙碌。现有的工作通常具有老派的稳固性。并且，在培养那些否则会被浪费的想法时，有一种满足的经济感。\n\n但是，最常见的被忽视的问题并不是在意义上明确地不流行，也就是说，它并不是过时的。它只是看起来并不像实际上那么重要。你怎么找到这些呢？通过自我放纵——让你的好奇心尽情地放飞，至少暂时地忽\n\n略你的头脑里那个说你只应该工作在“重要”问题上的小声音。\n\n你确实需要处理重要的问题，但几乎每个人对什么算重要都太保守了。如果你的附近有一个重要但被忽视的问题，那它可能已经在你的潜意识的雷达屏幕上了。所以，试着问问自己：如果你要从“认真”的工作中抽出时间，仅仅是因为它真的很有趣，你会做什么？答案可能比你认为的更重要。\n\n在选择问题时的独创性似乎比在解决它们时的独创性更重要。这就是区别开创全新领域的人的特点。所以可能看起来只是第一步——决定要做什么——在某种意义上是整个游戏的关键。1/N\n\n很少有人理解这一点。关于新想法的最大误解之一是它们构成中的问题与答案的比例。人们认为大思想是答案，但往往真正的洞见在问题中。\n\n我们低估问题的部分原因是它们在学校中的使用方式。在学校中，它们往往只在被回答之前短暂存在，就像不稳定的粒子。但是一个真正好的问题可以更多。一个真正好的问题是部分发现。新物种是如何产生的？使物体坠向地球的力量是否和使行星保持在它们轨道上的力量相同？即使提出这样的问题，你已经进入了令人兴奋的新领域。\n\n未回答的问题可以是你身边不舒服的东西。但你携带的越多，发现解决方案的机会就越大，或者可能更令人兴奋的是，发现两个未回答的问题是相同的。\n\n有时候你会携带一个问题很长时间。伟大的工作常常来自于返回到你多年前首次注意到的问题——甚至是在你的童年——并且不能停止思考。人们经常谈论保持你的青春梦想的重要性，但保持你的青春问题同样重要。\n\n这是实际专业知识与其流行形象最大的差异之一。在流行的形象中，专家是肯定的。但实际上，你越是困惑，就越好，只要（a）你困惑的事情很重要，而且（b）别人也不理解它们。\n\n想想在新想法被发现的那一刻之前发生了什么。通常，有足够专业知识的人对某件事感到困惑。这意味着，独创性部分包含在困惑中——在混乱中！你必须足够舒服地看到世界充满了谜题，但又不能那么舒服到你不想解决它们。\n\n富含未回答的问题是一件伟大的事情。这是那些富人越来越富的情况之一，因为获取新问题的最好方式是尝试回答现有的问题。问题不仅会引导到答案，而且会引导到更多的问题。\n\n最好的问题在回答中增长。你注意到当前范式突出的一条线，尝试拉它，它就越来越长。所以不要求问题在你尝试回答之前显然很大。你很少能预测那个。甚至注意到线条都已经很难，更不用说预测如果你拉它会有多少会解开。\n\n更好的做法是滥好奇——在很多线上拉一点，看看会发生什么。大事情从小事情开始。大事情的初始版本通常只是实验，或者是副业，或者是谈话，然后扩大成更大的东西。所以开始很多小事情。\n\n高产是被低估的。你尝试的事情越多，发现新事物的机会就越大。但要明白，尝试很多事情意味着尝试很多不起作用的事情。你不能有很多好主意，而不也有很多坏主意。\n\n虽然从头开始研究已经完成的所有事情听起来更负责任，但你通过尝试东西会学得更快，也会更有趣。当你看它时，你会更好地理解以前的工作。所以在开始上偏向错误。当开始意味着从小开始时，这更容易；这两个想法就像两块拼图一样。\n\n你是如何从小开始做大事呢？通过制作连续的版本。伟大的事物几乎总是通过连续的版本制作出来的。你从一件小事开始，发展它，最终版本既比你计划的更聪明，也比你计划的更有野心。\n\n特别是当你为人们制作东西时，制作连续的版本非常有用——快速地把初始版本放在他们面前，然后根据他们的反应来发展它。\n\n首先尝试可能有效的最简单的事情。出乎意料的是，它经常能做到。如果不能，这至少能让你开始。\n\n不要试图在任何一个版本中塞入太多新的东西。这种做法在第一个版本（发货时间过长）和第二个版本（第二系统效应）都有名字，但这都只是一个更普遍的原则的实例。\n\n新项目的早期版本有时会被轻视为玩具。当人们这样做时，这是个好兆头。这意味着它拥有新想法需要的一切，只是规模不足，但这种规模往往会随之而来。\n\n从小东西开始并发展它的替代方法是提前计划你要做什么。而规划通常看起来是更负责任的选择。说”我们将要做x，然后是y，然后是z”听起来比”我们将尝试x，看看会发生什么”更有组织；而且它更有组织，只是效果不太好。\n\n规划本身并不好。有时候它是必要的，但它是一种必要的恶——对无情条件的回应。这是你必须做的事情，因为你在处理不灵活的媒体，或者因为你需要协调很多人的努力。如果你保持项目小而使用灵活的媒体，你不需要做太多的计划，你的设计可以代替发展。\n\n承担你能承受的风险。在一个有效的市场里，风险与回报成正比，所以不要寻找确定性，而是寻找预期价值高的赌注。如果你偶尔不失败，你可能过于保守。\n\n尽管保守主义通常与老年人关联在一起，但是年轻人更容易犯这个错误。经验不足使他们害怕风险，但你年轻的时候才能承受最多的风险。\n\n即使失败的项目也可能有价值。在处理它的过程中，你会走过很少有人见过的领域，遇到很少有人提问的问题。可能没有比你试图做些太难的事情时遇到的问题更好的问题来源了。\n\n当你有年轻的优势时，利用它们，一旦你有了那些优势，利用年龄的优势。年轻的优势是能量，时间，乐观，和自由。年龄的优势是知识，效率，钱，和权力。你可以在年轻的时候努力获取一些后者，并在老年时保持一些前者。\n\n老年人还有知道他们有哪些优势的优势。年轻人往往在没有意识到的情况下拥有它们。最大的可能是时间。年轻人不知道他们在时间上有多富有。将这个时间转化为优势的最好方法是以稍微轻浮的方式使用它：出于好奇学习你不需要知道的东西，或者尝试建造一些东西只是因为它会很酷，或者变得在某事上异常好。\n\n那个”稍微”是一个重要的限定词。当你年轻的时候，大方地花时间，但不要简单地浪费它。做你担心可能浪费时间的事情和做你知道肯定会浪费时间的事情之间有很大的区别。前者至少是一个赌注，可能比你认为的更好。\n\n年轻，或者更准确地说，经验不足的最微妙的优势，就是你用新眼光看待一切。当你的大脑第一次接受一个想法时，有时两者并不完全匹配。通常问题在于你的大脑，但偶尔问题在于想法。它的一部分突出，当你考虑它时刺痛你。习惯了这个想法的人已经学会忽视它，但你有机会不这样做。\n\n所以当你第一次学习某件事时，注意那些看起来不对或者缺失的东西。你会被诱导忽视他们，因为有99%的机会问题出在你身上。你可能需要暂时把你的疑虑放在一边才能继续进步。但不要忘记它们。当你进一步了解主题时，回头检查他们是否还在。如果他们在你现有知识的光照下仍然可行，那么他们可能代表了一个未被发现的想法。\n\n从经验中获取的最有价值的一种知识就是知道你不必担心什么。年轻人知道所有可能重要的事情，但他们不知道这些事情的相对重要性。所以他们会对所有事情都感到担忧，而实际上他们应该更加关心少数几件事，对其他的事几乎不必担忧。\n\n但你不知道的只是经验不足问题的一半。另一半是你以为你知道的事实其实是错的。你以满头的荒诞无稽的观念进入成年世界——你获得的坏习惯和你被教导的错误事实——你要做出伟大的工作，就必须至少清除掉阻碍你想做的工作类型的那些荒诞无稽的想法。\n\n你头脑中剩下的很多荒谬观念是由学校留下的。我们已经习惯了上学，我们不自觉地把上学和学习视为一样的事情，但实际上学校有各种各样的奇怪特性，这些特性扭曲了我们对学习和思考的理解。\n\n例如，学校会引发被动性。自从你还是个小孩子，班级前面的权威就告诉你们所有人必须学习什么，然后测量你是否做到了。但是课堂和测试并不是学习的固有部分；它们只是学校通常设计方式的产物。\n\n你越早克服这种被动性就越好。如果你还在上学，试着把你的教育看作你的项目，把你的老师看作是为你工作，而不是反过来。这可能看起来有些牵强，但这并不仅仅是某种奇怪的思想实验。这在经济上是事实，而在最好的情况下，它在智力上也是事实。最好的老师并不希望成为你的老板。他们更希望你能推进前行，把他们当作建议的来源，而不是由他们带领你穿越学习的材料。\n\n学校还给你一种对工作的误导印象。在学校里，他们会告诉你问题是什么，并且几乎总是可以用你到目前为止学过的东西来解决。但在现实生活中，你需要找出问题是什么，而且你往往不知道它们是否可以被解决。\n\n但可能学校对你做的最糟糕的事情是训练你通过作弊去赢。你不能通过这样做来做出伟大的工作。你不能欺骗上帝。所以停止寻找那种类型的捷径。打败系统的方法是专注于别人忽视的问题和解决方案，而不是偷懒不去做事。\n\n不要把自己想象成依赖于某个门卫给你一个“大机会”。即使这是真的，获得它的最好方式也是专注于做好工作，而不是追逐有影响力的人。\n\n也不要把委员会的拒绝放在心上。使招生官员和奖项委员会印象深刻的品质与做出伟大工作所需的品质大不相同。选拔委员会的决定只有在它们是反馈循环的一部分时才有意义，而这种情况非常少见。\n\n新进入某个领域的人往往会模仿现有的工作。这本身没有什么坏处。没有比尝试复制它更好的方式来了解某件事情是如何运作的。而且模仿并不一定会使你的工作失去原创性。原创性是新思想的存在，而不是旧思想的缺乏。\n\n有好的模仿方式，也有坏的模仿方式。如果你要复制某件事，应该公开地去做，而不是偷偷地，或者更糟糕的，不自觉地去做。这就是被误传的名言“伟大的艺术家偷窃”所指的。真正危险的模仿，那种让模仿名声扫地的，是那种你甚至没有意识到你在模仿，因为你只不过是在别人铺好的轨道上运行的火车。但在另一个极端，模仿可以是优越性的表现，而不是从属关系。 [25]\n\n在很多领域，你的早期工作几乎必然会在某种程度上基于他人的工作。项目很少在真空中产生。它们通常是对以前工作的反应。当你刚开始的时候，你没有任何以前的工作；如果你要对某件事做出反应，那只能是别人的。一旦你确立了地位，你就可以对你自己的工作做出反应。但是虽然前者被称为衍生性的，后者并没有，结构上两种情况比看起来更相似。\n\n奇怪的是，最新颖的观点的新奇性有时使它们最初看起来比实际更加模仿。新发现往往必须最初被想象成现有事物的变体，甚至是由他们的发现者，因为还没有概念性的词汇来表达它们。\n\n然而，模仿确实有一些危险。其中一个是你会倾向于复制旧的东西——那些在他们的时代位于知识前沿的东西，但现在已经不再是。\n\n当你复制某样东西时，不要复制它的所有特性。有些特性如果你模仿，你会变得荒谬。比如，你如果是18岁，就不要模仿一个50岁的著名教授的举止，或者在几百年后模仿文艺复兴诗歌的语言。\n\n你所崇敬的事物中的一些特性，是它们尽管存在缺陷但依然成功。实际上，最容易模仿的特性最有可能是缺陷。\n\n这在行为上尤其真实。有些有才华的人是混蛋，这有时会让没有经验的人觉得成为混蛋是有才华的一部分。这不是事实；有才华只是他们得以逃脱后果的方式。\n\n模仿的最强大的一种方式是从一个领域复制某些东西到另一个领域。历史上充满了这种类型的偶然发现，所以可能值得通过主动学习其他类型的工作来帮助偶然发生。如果你让这些成为隐喻，你可以从相当远的领域获取灵感。\n\n消极的例子可以和积极的例子一样鼓舞人心。实际上，你有时候可以从做得糟糕的事情中学到比从做得好的事情中更多的东西；有时候，只有当某些东西缺失时，才能明确地看到需要什么。\n\n如果你的领域中的很多最好的人都聚集在一个地方，那么通常去那里逗留一段时间是一个好主意。这将提升你的雄心壮志，并且，通过向你展示这些人也是人类，提升你的自信。[26]\n\n如果你是真诚的，你可能会得到比你预期更热烈的欢迎。大多数在某事上非常出色的人都愿意和任何真正感兴趣的人谈论这件事。如果他们真的很擅长他们的工作，那么他们可能对它有一种业余爱好者的兴趣，而业余爱好者总是愿意谈论他们的爱好。\n\n然而，找到真正出色的人可能需要一些努力。做出伟大工作有这样的威望，以至于在一些地方，特别是大学，有一种礼貌的虚构，即每个人都在从事这种工作。而这远非事实。大学内的人不能公开地说出这个，但在不同部门中所做的工作的质量差异非常大。有些部门有人在做出伟大的工作；有些部门在过去曾经做出过；有些部门从来没有。\n\n寻找最好的同事。有很多项目是不能一个人完成的，即使你正在从事可以独立完成的项目，有其他人鼓励你并提供想法也是有好处的。\n\n同事不仅影响你的工作，他们也影响你。所以，和你想变得像他们的人一起工作，因为你会变得像他们。\n\n在同事中，质量比数量更重要。拥有一两个伟大的同事比拥有一栋楼满的还不错的同事要好。事实上，这不仅仅是更好，而是必要的，从历史来看：伟大的工作在一群人中发生的程度表明，同事往往决定了你是否能做出伟大的工作。\n\n你如何知道你的同事足够好呢？根据我的经验，当你的同事足够好时，你会知道的。这意味着如果你不确定，你可能还没有。但可能可以给出比这更具体的答案。这是一个尝试：足够好的同事提供令人惊讶的洞察力。他们能看到和做你无法做的事情。所以，如果你有一小部分足够好的同事能在这个意义上让你保持警惕，你可能就已经超过了门槛。\n\n我们大多数人都可以从与同事合作中受益，但有些项目需要更大规模的人，开始这样的项目并不适合每个人。如果你想运行这样的项目，你必须成为一个管理者，而优秀的管理需要才能和兴趣，就像任何其他类型的工作一样。如果你没有这些，那就没有中间道路：你必须强迫自己把管理当作第二语言学习，或者避免这样的项目。[27]\n\n保持你的士气。当你致力于雄心勃勃的项目时，这是一切的基础。你必须像照顾和保护一个活生生的有机体一样，照顾和保护它。\n\n士气始于你的人生观。如果你是乐观主义者，你更可能做出伟大的工作，如果你认为自己是幸运的，那么你也更可能，而如果你把自己当成受害者看待，那就相反了。\n\n事实上，工作在一定程度上可以保护你免受你的问题的困扰。如果你选择纯粹的工作，其困难本身将成为你从日常生活的困扰中逃避的庇护所。如果这是一种逃避，那它是一种非常富有成效的形式，历史上一些最伟大的思想家都曾使用过它。\n\n士气可以通过工作得到积累：高士气帮助你做好工作，这又提高了你的士气，帮助你做得更好。但这个循环也有反方向的操作：如果你没有做好工作，那会使你士气低落，使你更难做好。由于这个循环在正确的方向上运转的重要性，当你陷入困境时，转向更简单的工作可能是个好主意，只要你开始做些事情就行。\n\n雄心壮志的人犯的最大错误之一是允许挫折一下子摧毁他们的士气，就像气球破裂一样。你可以通过明确地把挫折视为你工作过程的一部分，来对自己进行预防接种。解决难题总是涉及到一些回溯。\n\n做出伟大的工作是一个深度优先搜索，其根节点是你的愿望。所以”如果一开始你没有成功，就一直尝试”并不完全正确。它应该是：如果一开始你没有成功，要么再试一次，要么回溯然后再试一次。\n\n“永不放弃”也不完全正确。显然，有时候选择放弃是正确的选择。更精确的版本应该是：永远不要让挫折让你恐慌地比你需要的更多地回溯。推论：永远不要放弃根节点。\n\n如果工作是一种挣扎，这并不一定是坏事，正如跑步时喘不过气来并不一定是坏事。这取决于你跑得有多快。所以，学会区分好的疼痛和坏的疼痛。好的疼痛是努力的标志；坏的疼痛是伤害的标志。\n\n观众是士气的关键组成部分。如果你是学者，你的观众可能是你的同行；在艺术领域，可能是传统意义上的观众。不管怎样，它不需要很大。观众的价值并不是随着其大小线性增长的。这对于名人来说是坏消息，但对于刚起步的人来说是好消息，因为这意味着一个小而忠实的观众就足以支撑你。如果有一小部分人真心喜欢你正在做的事情，那就够了。\n\n尽可能地避免让中间人介入你和你的观众之间。在某些类型的工作中，这是不可避免的，但是逃脱它的感觉如此令人解放，你可能会更愿意转向一个相邻的类型，只要这样可以让你直接面对。[28]\n\n你花时间的人也会对你的士气产生很大影响。你会发现有些人会增加你的能量，有些人会减少它，而某个人的影响并不总是你预期的那样。寻找那些能增加你能量的人，并避开那些减少你能量的人。当然，如果有人需要你照顾，那是优先的。\n\n不要和一个不理解你需要工作，或者把你的工作看作是对你注意力的竞争的人结婚。如果你有野心，你需要工作；这几乎就像是一种医疗条件；所以不让你工作的人要么是不理解你，要么就是理解你但不在乎。\n\n最终，士气是物理的。你用你的身体思考，所以照顾好它很重要。这意味着定期锻炼，吃得好，睡得好，避免使用更危险的种类的药物。跑步和步行是特别好的锻炼方式，因为它们有利于思考。[29]\n\n做出伟大工作的人并不一定比其他人更快乐，但他们比不这样做的时候更快乐。实际上，如果你聪明并且有野心，不生产是危险的。那些聪明且有野心但没有实现多少的人往往会变得痛苦。\n\n向别人展示自己是可以的，但选择好要展示给谁。你尊重的人的观点是信号。而名声，也就是你可能尊重或可能不尊重的更大群体的观点，只会增加噪音。\n\n一种工作的威望最好是滞后指标，有时候完全是误解。如果你做任何事情做得足够好，你就会使它具有威望。所以对一种工作的问题不是它有多少威望，而是它可以做得多好。\n\n竞争可以是一个有效的动力，但不要让它为你选择问题；不要让自己被拉进去，仅仅因为其他人在追求某件事。事实上，不要让竞争者让你做任何比更努力工作更具体的事情。\n\n好奇心是最好的指南。你的好奇心从不撒谎，它比你更知道哪些值得关注。\n\n注意那个词经常出现。如果你问一个神谕做出伟大工作的秘诀，神谕以一个单词回答，我会打赌那个词是”好奇心”。\n\n这并不直接转化为建议。仅仅具有好奇心是不够的，你也不能命令好奇心。但你可以培养它，让它驱动你。\n\n好奇心是做出伟大工作的所有四个步骤的关键：它会为你选择领域，带你到前沿，让你注意到其中的空白，并驱动你去探索。整个过程就像是与好奇心的一场舞蹈。\n\n信不信由你，我尽量让这篇文章尽可能短。但它的长度至少意味着它起到了过滤的作用。如果你能看到这里，你一定对做出伟大的工作感兴趣。如果是这样，你已经比你可能意识到的要进展得更远了，因为愿意希望的人数很少。\n\n做出伟大工作的因素是字面上、数学意义上的因素，它们是：能力、兴趣、努力和运气。运气你无法控制，所以我们可以忽略。如果你确实想做出伟大的工作，我们可以假设你会努力。所以问题就归结为能力和兴趣。你能否找到一种工作，你的能力和兴趣可以结合起来产生新的想法的爆炸？\n\n在这里有理由保持乐观。有许多不同的方式可以做出伟大的工作，而且还有更多尚未被发现的方式。在所有那些不同类型的工作中，你最适合的那一种可能是非常接近的匹配。可能是滑稽地接近的匹配。这只是一个问题，找到它，以及你的能力和兴趣可以带你进入多深。你只能通过尝试来回答这个问题。\n\n有更多的人可以尝试做出伟大的工作。阻止他们的是一种谦虚和恐惧的组合。试图成为牛顿或莎士比亚似乎过于自大。这也似乎很困难；如果你尝试那样的事情，你肯定会失败。大概计算很少是明确的。很少有人有意识地决定不去尝试做出伟大的工作。但这就是在潜意识里发生的事情；他们回避这个问题。\n\n所以我要对你进行一次偷偷的技巧。你想做出伟大的工作，还是不想呢？现在你必须有意识地决定。对不起。我不会对一般的听众这么做。但我们已经知道你有兴趣。\n\n不要担心被认为自大。你不必告诉任何人。如果它太难，你失败了，那又怎样呢？许多人有比这更严重的问题。实际上，如果这是你最大的问题，你将会很幸运。\n\n是的，你必须努力工作。但再次，许多人必须努力工作。而如果你在做你觉得非常有趣的事情，你一定会的，如果你在正确的路径上，那么工作可能会感觉比许多同行的工作要轻松。\n\n发现就在那里，等待被发现。为什么不是你呢？2/N\n\n备注 [1] 我不认为你能给出一个准确的定义来界定什么是伟大的工作。做伟大的工作意味着你以非常出色的方式做一些重要的事情，从而扩展人们对可能性的想象。但是，重要性没有一个阈值。它是一个程度的问题，而且通常在当时很难判断。所以我宁愿人们专注于发展他们的兴趣，而不是担心它们是否重要。只要尝试做一些令人惊叹的事情，让未来的世代来评判你是否成功。\n\n[2] 很多的单口喜剧都是基于在日常生活中注意到的异常现象。”你有没有注意到…？”新的想法来自对这些非琐碎事物的观察。这可能有助于解释人们对新想法的反应往往是笑声的前半部分：哈！\n\n[3] 第二个限定词非常关键。如果你对大多数权威忽视的事物感到兴奋，但你不能给出比“他们不懂”更精确的解释，那么你开始进入狂热者的领域了。\n\n[4] 找到可以工作的事物并不仅仅是在当前版本的你和已知问题列表之间找到匹配的问题。你通常需要和问题共同发展。这就是为什么有时候找出该从事什么工作可能非常困难。搜索空间是巨大的。它是所有可能的工作类型（已知和待发现的）和所有可能的未来版本的你的笛卡尔积。\n\n你无法搜索整个空间，所以你必须依赖启发式方法来生成通过它的有前景的路径，并希望最好的匹配会集中在一起。但他们并不总是这样；不同类型的工作被集合在一起更多的是由历史的偶然事件而不是它们之间的内在相似性。\n\n[5] 好奇的人更有可能做出伟大的工作有很多原因，但其中一个更微妙的原因是，通过广泛的探索，他们更有可能找到首要的工作内容。\n\n[6] 如果你认为你的听众比你水平低，为他们创作东西也可能会很危险，因为这可能会导致你对他们傲慢。如果你用足够愤世嫉俗的方式来做这个，你可以赚很多钱，但这并不是通向伟大工作的道路。使用这种方式的人并不会在乎。\n\n[7] 这个想法我从哈代的《一个数学家的道歉》中学到的，我向任何有野心想要做伟大工作的人推荐这本书，无论他们是在哪个领域。\n\n[8] 就像我们高估了我们一天能做的事情，低估了我们几年能做的事情，我们也高估了拖延一天所造成的损害，低估了拖延几年所造成的损害。\n\n[9] 你通常无法通过做你完全想做的事情来获得报酬，特别是在早期。有两种选择：通过做接近你想做的工作来获得报酬，并希望推动它更接近，或者通过做完全不同的事情来获得报酬，并在业余时间做你自己的项目。两种方式都可以，但都有缺点：在第一种方式中，你的工作默认被妥协，在第二种方式中，你必须努力获得做自己项目的时间。\n\n[10] 如果你正确地安排你的生活，它会自动提供焦点-放松周期。完美的设置是一个你在其中工作，并且你步行往返的办公室。\n\n[11] 可能有一些非常不务实际的人在没有有意识地尝试的情况下做出了伟大的工作。如果你想扩展这个规则以涵盖那种情况，它变成：除了做到最好以外，不要试图成为任何事。\n\n[12] 在像表演这样的工作中，目标是采取一个假的角色，这变得更加复杂。但即使在这里，也有可能受到影响。也许在这样的领域，规则应该是避免无意的装腔作势。\n\n[13] 只有在你的信仰是无法被证伪的情况下，你才能安全地持有你认为不可质疑的信念。例如，你可以安全地持有法律应该平等对待所有人的原则，因为一个句子中含有”应该”的句子其实并不是关于世界的陈述，因此很难被证明是错误的。如果你的原则没有任何证据可以证明它是错误的，那么就不会有任何事实你需要忽视以保持它。\n\n[14] 装腔作势比知识上的不诚实更易于治愈。装腔作势往往是年轻人的缺点，随着时间的推移会消退，而知识上的不诚实更多的是一个人格的瑕疵。\n\n[15] 显然，你不需要在产生想法的那一刻正在工作，但你可能刚刚完成了一些工作。\n\n[16] 有人说，精神活性药物也有类似的效果。我对此持怀疑态度，但也对它们的效果几乎一无所知。\n\n[17] 例如，你可能会将第n个最重要的话题的关注度设为(m-1)/m^n，其中m>1。当然，你无法如此精确地分配你的关注度，但这至少给出了一个合理的分配方案的想法。\n\n[18] 定义一种宗教的原则必须是错误的。否则，任何人都可能采用它们，那么就没有什么能区分该宗教的信徒和其他所有人。\n\n[19] 尝试写下你年轻时所思考的问题列表可能是一个很好的练习。你可能会发现你现在已经有能力去处理其中的一些问题。\n\n[20] 原创性和不确定性之间的关联导致了一个奇怪的现象：因为守旧者比独立思考者更确定，这倾向于在争论中让他们占上风，尽管他们通常更愚蠢。 “最好的人都没有信念，而最差的人充满了激烈的激情。” [21] 这一观点源自林纳斯·鲍林的 “如果你想有好的想法，你必须有很多想法。”\n\n[22] 将一个项目贬低为“玩具”就像将一个陈述贬低为“不恰当”一样。这意味着不能对其做出更有实质性的批评。\n\n[23] 判断你是否在浪费时间的一个方法是问你自己是在生产还是在消费。编写电脑游戏比玩游戏更不可能是浪费时间，而玩那些需要你创造东西的游戏比玩那些不需要你创造东西的游戏更不可能是浪费时间。\n\n[24] 另一个相关的优点是，如果你还没有公开发表过任何东西，你就不会偏向于支持你早先的结论的证据。如果你有足够的诚实，你可以在这方面保持永远的年轻，但很少有人能做到。对于大多数人来说，之前发布的观点会产生类似于意识形态的影响，只是数量为1。\n\n[25] 在1630年代早期，丹尼尔·麦蒂恩斯创作了一幅画，描绘了亨丽埃塔·玛丽亚向查尔斯一世递交月桂冠的场景。然后，范戴克画了他自己的版本，以展示他有多好。\n\n[26] 我故意对什么是“地点”保持模糊。就目前而言，处于同一物理位置有一些很难复制的优势，但这可能会改变。\n\n[27] 当其他人必须做的工作非常受限制时，这是错误的，比如 SETI@home 或比特币。通过定义具有更多自由行动节点的类似的受限协议，可能可以扩大这个错误的范围。\n\n[28] 推论：建立一个使人们能够绕过中间人直接与他们的观众接触的东西可能是个好主意。\n\n[29] 始终走或跑相同的路线可能会有所帮助，因为这样可以让你有更多的注意力去思考。我有这种感觉，而且有一些历史证据支持这一点。也许仅仅是因为这样的路线比较熟悉，因此不那么让人分心。\n","tags":["转载","生活","Greate Work"],"categories":["生活"]},{"title":"Hello World","url":"/2023/04/12/hello-world/","content":"# 欢迎来到我的互联网小窝 🌟\n\n---\n\n在这个小小的互联网角落，我想与大家分享关于生活和技术方面的点点滴滴。这个小小的博客站，是我记录成长、学习的地方，也是我们一起交流、成长、加油的平台！\n\n无论是生活中的小确幸，还是技术探索的心得，我都希望能在这里与你们一起见证。这个博客站将是我的个人成长之旅的见证者，也是我们共同努力的见证者。\n\n每一次的留言和互动，都是对我最大的鼓励和支持。让我们共同探索未知的领域，共同勇敢面对挑战，让彼此在这个无尽的网络世界中携手前行。\n\n希望你能常来做客，和我一起分享生活的美好，探讨技术的奥秘 💻。让我们一起努力，一起进步，让彼此在这个虚拟的世界里变得更加美好、充实！\n\n感谢你们，让这个小窝充满爱与温暖 🌺。期待我们在这里相遇，共同创造更多美好的回忆 🚀!\n\n---","categories":["大学生活"]},{"title":"关于","url":"/about/index.html"},{"title":"朋友圈","url":"/fcircle/index.html"},{"title":"便携小空调 - 为你的夏日带去清凉!","url":"/air-conditioner/index.html","content":"\n> 终于为博客安装上了便携小空调\n\n<style>\n.copyright-box a {\n  border-bottom: none !important;\n  padding: 0 !important;\n}\n</style>\n\n<div id=\"air-conditioner-vue\"></div>\n<script defer data-pjax src='https://blog-1301661174.cos.ap-shanghai.myqcloud.com/js/air-conditioner.js'></script>\n"},{"title":"分类","url":"/categories/index.html","content":"\n<style>\n  #libCategories .card-wrap:hover .card-info:after {\n    width: 300%;\n  }\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://npm.elemecdn.com/js-heo@1.0.11/3dCard/no3d.css\">\n\n<div id='libCategories'>\n<div id=\"lib-cards\" class=\"container\">\n\n<a href='javascript:void(0);' onClick='pjax.loadUrl(\"/categories/开发/\")'>\n<card data-image=\"https://cdn-ali-img-shstaticbz.shanhutech.cn/bizhi/staticwp/202008/4fcc988df33718aeed3f7be68f148e2c--2427704688.jpg\">\n<h1 slot=\"header\">开发</h1>\n<p slot=\"content\">开发学习之路。</p>\n</card>\n</a>\n\n<a href='javascript:void(0);' onClick='pjax.loadUrl(\"/categories/大学生活/\")'>\n  <card data-image=\"https://img1.baidu.com/it/u=989148365,1996007791&fm=253&fmt=auto&app=138&f=JPEG?w=889&h=500\">\n    <h1 slot=\"header\">大学生活</h1>\n    <p slot=\"content\">在大学期间发生的一些事儿。</p>\n  </card>\n</a>\n\n<a href='javascript:void(0);' onClick='pjax.loadUrl(\"/categories/生活/\")'>\n  <card data-image=\"https://img02.anheyu.com/adminuploads/1/2022/09/05/6315e142a69a9.webp\">\n    <h1 slot=\"header\">生活</h1>\n    <p slot=\"content\">和好朋友👬们一起经历的有趣事。</p>\n  </card>\n</a>\n\n</div>\n</div>\n\n<script src='https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.min.js' data-pjax></script>\n\n<script type=\"text/javascript\" src=\"https://npm.elemecdn.com/anzhiyu-theme-static@1.0.7/no3d/no3d.js\" data-pjax></script>\n"},{"title":"即刻短文","url":"/essay/index.html"},{"title":"友链","url":"/link/index.html"},{"url":"/json/music.json","content":"[\n    {\n        \"name\": \"青花瓷\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc\"\n    },\n    {\n        \"name\": \"稻香\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc\"\n    },\n    {\n        \"name\": \"晴天\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc\"\n    },\n    {\n        \"name\": \"七里香\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc\"\n    },\n    {\n        \"name\": \"花海\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc\"\n    },\n    {\n        \"name\": \"反方向的钟\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc\"\n    },\n    {\n        \"name\": \"兰亭序\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc\"\n    },\n    {\n        \"name\": \"说好的辛福呢\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc\"\n    },\n    {\n        \"name\": \"等你下课 (with 杨瑞代)\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc\"\n    },\n    {\n        \"name\": \"我落泪情绪零碎\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc\"\n    },\n    {\n        \"name\": \"听妈妈的话\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc\"\n    },\n    {\n        \"name\": \"明明就\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc\"\n    },\n    {\n        \"name\": \"我是如此相信\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc\"\n    },\n    {\n        \"name\": \"发如雪\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc\"\n    },\n    {\n        \"name\": \"以父之名\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc\"\n    },\n    {\n        \"name\": \"园游会\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc\"\n    },\n    {\n        \"name\": \"本草纲目\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc\"\n    },\n    {\n        \"name\": \"龙卷风\",\n        \"artist\": \"周杰伦\",\n        \"url\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3\",\n        \"cover\": \"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000\",\n        \"lrc\": \"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc\"\n    }\n]\n"},{"title":"音乐馆","url":"/music/index.html"},{"title":"版权协议","url":"/privacy/index.html","content":"\n为了保持文章质量，并保持互联网的开放共享精神，保持页面流量的稳定，综合考虑下本站的所有原创文章均采用 cc 协议中比较严格的[署名-非商业性使用-禁止演绎 4.0 国际标准](https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh)。这篇文章主要想能够更加清楚明白的介绍本站的协议标准和要求。方便你合理的使用本站的文章。\n\n本站无广告嵌入和商业行为。违反协议的行为不仅会损害原作者的创作热情，而且会影响整个版权环境。强烈呼吁你能够在转载时遵守协议。遵守协议的行为几乎不会对你的目标产生负面影响，鼓励创作环境是每个创作者的期望。\n\n## 哪些文章适于本协议？\n\n所有原创内容均在文章标题顶部，以及文章结尾的版权说明部分展示。\n\n原创内容的非商用转载必须为完整转载且标注出处的`带有完整 url 链接`或`访问原文`之类字样的超链接。\n\n作为参考资料的情况可以无需完整转载，摘录所需要的部分内容即可，但需标注出处。\n\n## 你可以做什么？\n\n只要你遵守本页的许可，你可以自由地共享文章的内容 — 在任何媒介以任何形式复制、发行本作品。并且无需通知作者。\n\n## 你需要遵守什么样的许可？\n\n### 署名\n\n你必须标注内容的来源，你需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接提升阅读体验）。\n\n### 禁止商用\n\n本站内容免费向互联网所有用户提供，分享本站文章时禁止商业性使用、禁止在转载页面中插入广告（例如谷歌广告、百度广告）、禁止阅读的拦截行为（例如关注公众号、下载 App 后观看文章）。\n\n### 禁止演绎\n\n- 分享全部内容（无修改）\n  你需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接）\n- 分享部分截取内容或者衍生创作\n  目前本站全部原创文章的衍生品禁止公开分享和分发。如有更好的修改建议，可以在对应文章下留言。如有衍生创作需求，可以在评论中联系。\n- 作为参考资料截取部分内容\n  作为参考资料的情况可以无需完整转载，摘录所需要的部分内容即可，但需标注出处。\n\n## 什么内容会被版权保护\n\n包括但不限于：\n\n- 文章封面图片\n- 文章标题和正文\n- 站点图片素材（不含主题自带素材）\n\n## 例外情况\n\n本着友好互相进步的原则，被本站友链收录的博客允许博客文章内容的衍生品的分享和分发，但仍需标注出处。\n\n本着互联网开放精神，你可以在博客文章下方留言要求授权博文的衍生品的分享和分发，标注你的网站地址。\n\n## 网站源代码协议\n\n网站源代码（仅包含 css、js）的代码部分采用 GPL 协议。"},{"title":"标签","url":"/tags/index.html"},{"title":"我的装备","url":"/equipment/index.html"}]